[Setup]
;--------------------------------------------------------------------
;Description:
;	The [Setup] section is where you define the application's setup
;	file and main bitmap to use.
;Entries:
;	Exe		= Setup program to run when called from another
;			  program (e.g. front end installer).
;	Bmp		= Bitmap to use for the main installation screen.
;--------------------------------------------------------------------
EXE=SETUP.EXE


[Information]
;--------------------------------------------------------------------
;Description:
;	Contains miscellaneous application information needed to complete
;	the installation.
;Entries:
;	Main Title	= Main title to appear in large text on upper
;			  left corner of screen during install.
;	Product Name	= Full name of the product used to register the
;			  uninstall information with the system.
;	Product Version	= Version of the product (also used to register
;			  the uninstall information).
;	Product Key	= Product's main executable file (used to register
;			  the uninstall information).
;	Company Name	= Name of the company who owns the product (used
;			  to register the uninstall information).
;	Space Needed	= Amount of drive space (in bytes) required to 
;			  install this product.
;	NumDirs		= Number of '[Dir #]' sections in this file.
;			  If this file contains three Dir sections,
;			  [Dir 1], [Dir 2] and [Dir 3] and this value
;			  is set to 2 then only the first two will
;			  actually be processed.  Make *SURE* this matches
;			  the actual number of Dirs that need to be handled!
;	ReqUserInfo	= Require user information to proceed?  This flag
;			  tells the setup if it needs to validate license
;			  information before continuing.  Simply changing
;			  this will not eliminate the need for validating
;			  software (e.g. GRAMS v5) before using it, it will
;			  simply allow the setup to not worry about it.
;	HideWelcome	= Don't display the initial welcome screen with
;			  copyright and license information.
;	ShowStatus	= Display the status dialog (the horizontal progress
;			  indicator) flag.  0=No, 1=Yes
;	ShowFeedback	= Display the feedback dialog (the 3 vertical progress
;			  indicators) flag.  0=No, 1=Yes
;--------------------------------------------------------------------
Main Title=Installing Thermo GRAMS Data Viewer
Product Name=GRAMS Data Viewer
Product Version=20301
Product Key=GDVW
Product Code=GDVW
Company Name=Thermo Electron Corporation
NumDirs=1
ReqUserInfo=1
HideWelcome=1
ShowStatus=1
ShowFeedback=1
HasClientInstall=0
ReqLicense=0
AppExe=SPCVIEW.EXE
IsClient=0
Req ADO2=0
Req DCOM95=0
Req NT4SP3=0
Req CNV2=0
Req GCFG=0
Req KB=0
Silent=0
MustRead=0
ForceUpdate=0
[Prompts]
;--------------------------------------------------------------------
;Description:
;	Allows you to prompt the user for information.  There are three
;	kinds of prompts: single line edit fields, single line edit fields
;	with 'Browse' buttons (for paths and files) and there is the
;	standard InstallShield 'User Information' prompt that asks for
;	user name, company name and serial number.  Note that when using
;	this type of prompt, the result needs to be contained in a single
;	string, so it is kept formatted as follows:
;		UserName|CompanyName|SerialNumber
;Format:
;	<VariableName> = <Value>, <PromptString>, <PromptFlag>
;Where:
;	<VariableName>	= Variable name to hold the result of this prompt.
;	<Value>		= Original default value.
;	<PromptString>	= Prompt string to display to user.
;	<PromptFlag>	= Flag to determine which dialog to prompt user with:
;				1:	Single line edit field
;				2:	Single line edit field w/Browse button
;				3:	User Name, Company Name, License Info dialog
;Example:
;	[Prompts]
;	$DESTDIR$ = C:\GRAMS, Directory to install GRAMS/AI:, 2
;	$USERNAME$ = , User Name (as shown on license sheet):, 1
;--------------------------------------------------------------------

$OWNER$ = ,User name (as shown on license sheet):$CR$Note: Case and spelling must be exact!:, 1
$COMPANY$ = ,Company name (as shown on license sheet):$CR$Note: Case and spelling must be exact!, 1
$LICENSE$ = ,License number (as shown on license sheet):$CR$Note: Case and spelling must be exact!, 1

[Destination]
$DESTDIR$ = C:\Program Files\Galactic, Directory to install GRAMS product:, 2

[Paths]
;----------------------------------------------------------------------

$WKBKDIR$ = $GRAMSDIR$\Workbooks
$DATADIR$ = $GRAMSDIR$\Sample Data
$APPSDIR$ = $GRAMSDIR$\CertifiedApps
$WKTMDIR$ = $GRAMSDIR$\Templates
$PGTMDIR$ = $GRAMSDIR$\Templates\Pages
$DRIVERS$ = $GRAMSDIR$\Drivers
$GRPSDIR$ = $GRAMSDIR$\Groups
$LOGSDIR$ = $GRAMSDIR$\Logs
$GALAWEB$ = $GRAMSDIR$\Galaweb
$COMMBIN$ = $SRCDIR$\..\Common\Bin
$COMMWEB$ = $SRCDIR$\..\Common\GalaWeb
$GRAMSDIR$ = $DESTDIR$
$MSDIR$ = $SRCDIR$\..\..\MSdlls
$SETUP$ = $SRCDIR$\SETUP.EXE
$COMMON$ = $SRCDIR$\..
;--------------------------------------------------------------------
;Description:
;	Allows you to perform files transfers, including the ability
;	to copy files, decompress files, create directories, set file
;	attributes.  This section is handled immediately after the
;	prompts section.
;Format:
;	<Filename.Ext> = <Transfer Mode>,<Destination>,[Flag]
;Where:
;	<Filename.Ext>	= Full path+filename of source file.
;	<Transfer mode>	= 1: Copy, 2: Decompress, 3: Create Directory, 4: None, 5: Register file(not copy)
;	<Destination>	= Destination directory or variable ($VAR$)
;	[Flag]		= Optional flags:
;				+1	Use version checking (EXE's and DLL's)
;				+2	Self registering file
;				+4	Shared file
;				+8	Locked file
;				+16	Set Read-only attribute
;				+32	Set Archive attribute
;				+64	Set System attribute
;				+128	Set Hidden attribute
;				+256	Include subdirectories
;				+512	NeverOverwrite
;Example:
;	\GRAMS\G50\G50.EXE = 1,$DESTDIR$,1
;	\GRAMS\G50\APPS\SMOOTH.AB = 1,$APPSDIR$
;--------------------------------------------------------------------
[Dir 1]
$SRCDIR$\BIN\*.*=1,$DESTDIR$,9


[OSUpdate]
;-------------------------------------------------------------------
;Format:
;	<VariableName> = <Name>, <Exe+path>,<check> 
;Where:
;	<VariableName>	=
;	<Name>		= 
;	<Exe+path>	= executable to run
;	<check>		= test to find
;			 
;example: DCOM95=Microsoft DCOM95,$MSDIR$\Dcom95.exe,DCOM95	 


[StartCheck]
;-------------------------------------------------------------------
;Format:
;	<VariableName> = <Name>,<Version>,<Exe+path>,<check> 
;Where:
;	<VariableName>	=
;	<Name>		=
	<Version>	= Version required.
;	<Exe+path>	= executable to run
;	<check>		= test to find
;			 
;example: ;CNV2=CNV2,2.0,$SRCDIR$\CNV2.exe,CNV2 

			 
[AddStartup]
;--------------------------------------------------------------------
;Description:
;	Allows you to add a program group and icons (shortcuts) for your
;	application.  
;Format:
;	<#> = <FolderName>,<IconName>,<CmdLine>,[WorkingDir],[IconFile],[IconNum]
;Where:
;	<#>		= INI entry number.  This must start with 1 and continue sequentially for all 
;			  icons following.
;	<FolderName>	= Name of the folder to create.
;	<IconName>	= Name to appear below the icon for a description of the icon.
;	<CmdLine>	= Full path and filename of the program to execute when the icon is pressed.
;	[WorkingDir]	= Working directory for the program (or blank if same as program file directory).
;	[IconFile]	= File containing the icon to use.
;	[IconNum]	= Ordinal number of the icon within the above icon file.
;Example:
;	[AddIcons]
;	1 = GRAMS 5.0,Jupiter,$DESTDIR$\G50.EXE
;	2 = GRAMS 5.0,Jupiter Readme,$DESTDIR$\READGRM5.TXT,,$DESTDIR$\G50.EXE,2
;--------------------------------------------------------------------


[AddIcons]
;--------------------------------------------------------------------
;Description:
;	Allows you to add a program group and icons (shortcuts) for your
;	application.  This is called immediately after the file transfer
;	section.
;Format:
;	<#> = <FolderName>,<IconName>,<CmdLine>,[WorkingDir],[IconFile],[IconNum]
;Where:
;	<#>		= INI entry number.  This must start with 1 and continue sequentially for all 
;			  icons following.
;	<FolderName>	= Name of the folder to create.
;	<IconName>	= Name to appear below the icon for a description of the icon.
;	<CmdLine>	= Full path and filename of the program to execute when the icon is pressed.
;	[WorkingDir]	= Working directory for the program (or blank if same as program file directory).
;	[IconFile]	= File containing the icon to use.
;	[IconNum]	= Ordinal number of the icon within the above icon file.
;Example:
;	[AddIcons]
;	1 = GRAMS 5.0,Jupiter,$DESTDIR$\G50.EXE
;	2 = GRAMS 5.0,Jupiter Readme,$DESTDIR$\READGRM5.TXT,,$DESTDIR$\G50.EXE,2
;--------------------------------------------------------------------
1=Thermo GRAMS Suite,GRAMS Data Viewer,"$DESTDIR$\spcview.exe"

[AddINI]
;--------------------------------------------------------------------
;Description:
;	Allows you to create entries in INI format files.  This section
;	is called immediately after the AddIcons section.
;Format:
;	<#> = <FileName>,<IniSection>,<IniEntry>,<IniValue>
;Where:
;	<#>		= INI entry number.  This must start with 1 and continue sequentially for all 
;			  INI entries to write.
;	<FileName>	= Name of INI file to write to.
;	<IniSection>	= Section in the INI file to write to (this is the part within brackets [ ] ).
;	<IniEntry>	= Entry in the INI file to write to (this is the part before the equals = ).
;	<IniValue>	= Value to write for this entry (this is the part after the equals = ).
;			<IniValue>=<IniValue1>+<IniValue2>+<IniValue3>...(this allows for an ini value that conatains commas.)
;Example:
;	[AddIni]
;	1 = $DESTDIR$\DATA.INI,MySection,MyEntry,Value for MyEntry
;	2 = $WINDIR$\TEST.INI,MySection,MyEntry,This is in the Windows directory!
;	3 = $DESTDIR$\G50.INI,PathInfo,Applications,$APPSDIR$
;--------------------------------------------------------------------

[RunFirst]
;--------------------------------------------------------------------
;Description:
;	Allows you to run applications during the installation before RunExe is called.  
;	
;Format:
;	<#> = [Prompt], <Filename.Exe>, [Arguments]
;Where:
;	<#>		= INI entry number.  This must start with 1 and continue sequentially for all
;			  INI entries to write.
;	[Prompt]	= Optional Yes/No prompt to display to the user before running executable.
;			  If the user chooses Yes, the program will be run otherwise it will not.
;			  Leave this blank followed by a comma if the program should be run
;			  without user intervention.
;	<Filename.Exe>	= Executable file to run.  This should be full path+filename and variables
;			  ($VAR$) are allowed.
;	[Arguments]	= Optional command line arguments to pass to <Filename.Exe>.
;Example:
;	[RunExe]
;	1 = NOTEPAD.EXE,READGRM5.TXT
;--------------------------------------------------------------------


[RunExe]
;--------------------------------------------------------------------
;Description:
;	Allows you to run applications during the installation.  This
;	is called immediately after the INI section is handled.
;Format:
;	<#> = [Prompt], <Filename.Exe>, [Arguments]
;Where:
;	<#>		= INI entry number.  This must start with 1 and continue sequentially for all
;			  INI entries to write.
;	[Prompt]	= Optional Yes/No prompt to display to the user before running executable.
;			  If the user chooses Yes, the program will be run otherwise it will not.
;			  Leave this blank followed by a comma if the program should be run
;			  without user intervention.
;	<Filename.Exe>	= Executable file to run.  This should be full path+filename and variables
;			  ($VAR$) are allowed.
;	[Arguments]	= Optional command line arguments to pass to <Filename.Exe>.
;Example:
;	[RunExe]
;	1 = NOTEPAD.EXE,READGRM5.TXT
;--------------------------------------------------------------------
1=Do you want to run the Thermo GRAMS Data Viewer now?,$GRAMSDIR$\SPCVIEW.EXE

[RunClient]
;--------------------------------------------------------------------
;Description:
;	Allows you to run applications during the installation.  This
;	is called immediately after the INI section is handled.
;Format:
;	<#> = [Prompt], <Filename.Exe>, [Arguments]
;Where:
;	<#>		= INI entry number.  This must start with 1 and continue sequentially for all
;			  INI entries to write.
;	[Prompt]	= Optional Yes/No prompt to display to the user before running executable.
;			  If the user chooses Yes, the program will be run otherwise it will not.
;			  Leave this blank followed by a comma if the program should be run
;			  without user intervention.
;	<Filename.Exe>	= Executable file to run.  This should be full path+filename and variables
;			  ($VAR$) are allowed.
;	[Arguments]	= Optional command line arguments to pass to <Filename.Exe>.
;Example:
;	[RunClient]
;	1 = NOTEPAD.EXE,READGRM5.TXT
;--------------------------------------------------------------------




[MustRead]
;--------------------------------------------------------------------
;Description:
;	Allows you to run applications during the installation.  This
;	is called immediately after the INI section is handled.
;Format:
;	<#> = [Prompt], <Filename.Exe>, [Arguments]
;Where:
;	<#>		= INI entry number.  This must start with 1 and continue sequentially for all
;			  INI entries to write.
;	[Prompt]	= Optional Yes/No prompt to display to the user before running executable.
;			  If the user chooses Yes, the program will be run otherwise it will not.
;			  Leave this blank followed by a comma if the program should be run
;			  without user intervention.
;	<Filename.Exe>	= Executable file to run.  This should be full path+filename and variables
;			  ($VAR$) are allowed.
;	[Arguments]	= Optional command line arguments to pass to <Filename.Exe>.
;Example:
;	[MustRead]
;	1 = NOTEPAD.EXE,READGRM5.TXT
;--------------------------------------------------------------------

;---------------------------------------------------------------------
[RunOnce]
;--------------------------------------------------------------------
;Description:
;	Allows you to run applications during the installation.  This
;	is called immediately after the INI section is handled.
;Format:
;	<#> = [Prompt], <Filename.Exe>, [Arguments]
;Where:
;	<#>		= INI entry number.  This must start with 1 and continue sequentially for all
;			  INI entries to write.
;	[Prompt]	= Optional Yes/No prompt to display to the user before running executable.
;			  If the user chooses Yes, the program will be run otherwise it will not.
;			  Leave this blank followed by a comma if the program should be run
;			  without user intervention.
;	<Filename.Exe>	= Executable file to run.  This should be full path+filename and variables
;			  ($VAR$) are allowed.
;	[Arguments]	= Optional command line arguments to pass to <Filename.Exe>.
;Example:
;	[RunOnce]
;	1 = NOTEPAD.EXE,READGRM5.TXT
;--------------------------------------------------------------------


[DIALOG]

Dialog1="Unable to locate the "	
Dialog2="Would you like to search manually?"	
Dialog3="Please choose the directory where SpecID.EXE can be found"
Dialog4="Error Licensing Product"
Dialog5="File Transfer Errors"
Dialog6="The following errors were logged while trying to handle the file:"
Dialog7="Done transferring files ..."
Dialog8="Transferring files ..."
Dialog9="Would you like to install the light client now? "
Dialog10="Installation incomplete."
Dialog11="Installation complete."	
Dialog12= "The License information you supplied is not correct. Please go back and check your Name, Company Name and License Number for correct spelling and capitalization." 
Dialog13="DCOM95 is needed to ensure proper program functionality. (Note: You MUST reboot your system after DCOM95 finishes.)"
	
;----------------------------------------------------------------------
[Registry]
;--------------------------------------------------------------------
;Description:
;	Allows you to create registry entries.  This is the last thing
;	handled before the setup exits.
;Format:
;	Create Key <#> = <Root>, <KeyName>
;	Set Value <#> = <Root>, <KeyName>, <ValueName>, <Value>, [%NUMBER%]
;Where:
;	Create Key <#>	= This allows you to simply create a key without setting
;			  any values in the key.  The <#> must start with 1 and
;			  continue sequentially for all keys to create.
;	Set Value <#>	= This allows you to set a value for a registry entry.
;			  The key is automatically created if it doesn't already
;			  exist.  The <#> must start with 1 and continue sequentially
;			  for all keys to set.  This <#> is independent of the
;			  'Create Key <#>', meaning if you want to both create a
;			  key and set a value, both entries would use #1.
;	<Root>		= The root for the registry entry to make/modify (e.g.
;			  HKEY_CLASSES_ROOT, HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE).
;	<KeyName>	= Name for the key to create or set.  Separate sub-level keys
;			  with a backslash (\).  Any keys that don't already exist
;			  will be created.
;	<ValueName>	= Which field under the <KeyName> field to set.  If this is
;			  blank then the '(Default)' field is set.
;	<Value>		= Actual value to set the key to.
;	[%NUMBER%]	= Optional: if this value exists (without the brackets) then 
;			  the field is treated as a numeric field instead of a string field.
;Example:
;	[Registry]
;	Create Key 1 = HKEY_CLASSES_ROOT,.ab\\shell\\open\\command
;	Create Key 2 = HKEY_CLASSES_ROOT,.abx\\shell\\open\\command
;
;	Set Value 1 = HKEY_CLASSES_ROOT,.ab,,AB File
;	Set Value 2 = HKEY_CLASSES_ROOT,.ab,DemoNumber,12345,yes
;--------------------------------------------------------------------

;--------------------------------------------------------------------
;Description:
;	The [Hardcoded] section is required and *MUST NOT* change!
;--------------------------------------------------------------------
[Hardcoded]
UserName=$OWNER$
LicenseNumber=$LICENSE$
CompanyName=$COMPANY$
Target=$DESTDIR$
