#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass literate-scrartcl
\begin_preamble
% Meta information - fill between {} and do not remove %
% \VignetteIndexEntry{hyperSpec Introduction}
% \VignetteKeywords{hyperspec}
% \VignettePackage{hyperSpec}
\AtBeginDocument{
\fvset{listparameters={\setlength{\topsep}{0pt}}} 
\renewenvironment{Schunk}{\vspace{\topsep}\begin{small}}{\end{small}\vspace{\topsep}
} 
\SweaveOpts{pgf = FALSE, eps = FALSE, external = FALSE, pdf = TRUE, keep.source = TRUE}
}

% my preferred packages
\usepackage{xspace}
\usepackage{tikz}

\newcommand{\rcm}[1]{\ensuremath{#1\;\mathrm{cm^{-1}}}\xspace}
\newcommand{\code}[1]{\nohyphens{\texttt{#1}}\xspace}
\newcommand{\hy}{\nohyphens{\texttt{hyperSpec}}\xspace}
\newcommand{\R}{\texttt{R}\xspace}
\end_preamble
\options a4paper, 10pt, smallheadings, DIV15
\use_default_options false
\language english
\inputencoding utf8x
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "hyperSpec Introduction"
\pdf_author "C. Beleites"
\pdf_subject "Introduction on the R package hyperSpec"
\pdf_keywords "hyperSpec"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rpackage{hyperSpec}
\end_layout

\end_inset

 Introduction 
\end_layout

\begin_layout Author
Claudia Beleites (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

cbeleites@units.it
\end_layout

\end_inset

)
\begin_inset Newline newline
\end_inset

CENMAT, DMRN, University of Trieste
\end_layout

\begin_layout Scrap
<<startup, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

options(SweaveHooks=list(fig=function() par(mar = c (4.1, 4.1, .6, .6)))) 
\begin_inset Newline newline
\end_inset

options ("width" = 100)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This vignette gives an introduction on basic working techniques using the
 R package 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rpackage{hyperSpec}
\end_layout

\end_inset

.
 It comes with three data sets, 
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Robject{chondro}
\end_layout

\end_inset

 a Raman map of chondrocytes in cartilage,
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Robject{flu}
\end_layout

\end_inset

 a set of fluorescence spectra of a calibration series, and
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Robject{laser}
\end_layout

\end_inset

 a time series of an unstable taser emission
\end_layout

\begin_layout Standard
In this vignette, all three data sets are used in an indermixed way to illustrat
e appropriate procedures for different tasks.
 
\end_layout

\begin_layout Subsection
Notation
\end_layout

\begin_layout Standard
In R, slots of a S4 class can be accessed directly by the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcommand{@}
\end_layout

\end_inset

 operator.
 In this vignette, the notation 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{@xxx}
\end_layout

\end_inset

 will thus mean 
\emph on

\begin_inset Quotes eld
\end_inset

slot xxx of an object
\emph default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Likewise, named elements of a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rclass{list}
\end_layout

\end_inset

, like the columns of a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rclass{data.frame}
\end_layout

\end_inset

, are accessed by the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{
\backslash
$}
\end_layout

\end_inset

 operator, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{
\backslash
$xxx}
\end_layout

\end_inset

 will be used for 
\emph on

\begin_inset Quotes eld
\end_inset

column xxx
\emph default

\begin_inset Quotes erd
\end_inset

, and as an abbrevation for 
\emph on

\begin_inset Quotes eld
\end_inset

column xxx of the data.frame in slot data of the object
\begin_inset Quotes erd
\end_inset


\emph default
.
\end_layout

\begin_layout Section
Loading the package
\end_layout

\begin_layout Standard

To load 
\lang english

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rpackage{hyperSpec}
\end_layout

\end_inset

, use
\end_layout

\begin_layout Scrap
<<init>>=
\begin_inset Newline newline
\end_inset

library (hyperSpec)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
The structure of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rclass{hyperSpec}
\end_layout

\end_inset

 objects
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rclass{hyperSpec}
\end_layout

\end_inset

 is a S4 (or new-style) class.
 It has four so-called 
\emph on
slots
\emph default
 that hold the data: 
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Robject{wavelength}
\end_layout

\end_inset

 containing a numeric vector with the wavelength axis of the spectra
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Robject{data}
\end_layout

\end_inset

 a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rclass{data.frame}
\end_layout

\end_inset

 with the spectra and all further information belonging to the spectra
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Robject{label}
\end_layout

\end_inset

 a list with appropriate labels (particularly for axis annotations) 
\end_layout

\begin_layout Description
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
Robject{log}
\end_layout

\end_inset

 a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rclass{data.frame}
\end_layout

\end_inset

 keeping track of what is done with the object
\end_layout

\begin_layout Standard
However, it is good practice to use the functions provided by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rpackage{hyperSpec}
\end_layout

\end_inset

 to handle the objects rather than accessing the slots directly.
 This also helps ensuring that proper (
\emph on
valid
\emph default
) objects are retained.
 
\end_layout

\begin_layout Standard
Most of the data is stored in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{@data}
\end_layout

\end_inset

.
 This 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rclass{data.frame}
\end_layout

\end_inset

 has one special column, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{
\backslash
$spc}
\end_layout

\end_inset

.
 It is the column that actually contains the spectra.
 The spectra are stored in a matrix inside this column, as illustrated in
 figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:structure"

\end_inset

.
 Even if there are no spectra, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{
\backslash
$spc}
\end_layout

\end_inset

 must still be present but it can contain a matrix with zero columns.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand include
filename "Strukturhyperspec.tex"

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:structure"

\end_inset

The stucture of a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rpackage{hyperSpec}
\end_layout

\end_inset

 object.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Slot 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{@label}
\end_layout

\end_inset

 contains an element for each of the columns in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{@data}
\end_layout

\end_inset

 plus one holding the label for the wavelength axis, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{.wavelength}
\end_layout

\end_inset

.
 The elements of the list may be anything suitable for 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rfunction{text}
\end_layout

\end_inset

, i.
\begin_inset space \thinspace{}
\end_inset

e.
 they should be either character strings or expressions for pretty axis
 annotations.
 To get familiar with expressions for axis annotition, see 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{? plotmath}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{demo (plotmath)}
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Remarks on S4 Classes
\end_layout

\begin_layout Standard
The concept of S4 classes offers more flexibility than the class concepts
 in many other programming languages.
 Functions may be added or changed by the user in his 
\emph on
workspace
\emph default
 at any time.
 Neither restart of R nor reloading of the package or anything the like
 is needed.
 At the same time, the original function is not deleted, it is just masked
 by the user's new function but stays accessible if the change should be
 reverted.
\end_layout

\begin_layout Standard
This offers the opportunity of easily writing specialized functions that
 are adapted to specific tasks.
\end_layout

\begin_layout Standard
S4 classes have a mechanism to define and enforce that the data actually
 stored in the object is appropriate for this class.
 In other words, there is a mechanism of 
\emph on
validity checking
\emph default
.
\end_layout

\begin_layout Standard
The functions provided by 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rpackage{hyperSpec}
\end_layout

\end_inset

 do check the validity of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rclass{hyperSpec}
\end_layout

\end_inset

 objects at the beginning, and --- if the validity could be broken by inappropra
te arguments --- also before leaving the function.
\end_layout

\begin_layout Section
Obtaining Basic Information about 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rpackage{hyperSpec}
\end_layout

\end_inset

 Objects
\end_layout

\begin_layout Standard
As usual, the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rmethod{print}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rmethod{show}
\end_layout

\end_inset

 methods display information about the object, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rmethod{summary}
\end_layout

\end_inset

 yields some additional details about the data handling done so far:
\end_layout

\begin_layout Scrap
<<print>>=
\begin_inset Newline newline
\end_inset

chondro
\begin_inset Newline newline
\end_inset

summary (chondro)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The data set 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Robject{chondro}
\end_layout

\end_inset

 consists of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{nrow (chondro)}
\end_layout

\end_inset

 spectra with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{nwl (chondro)}
\end_layout

\end_inset

 data points each, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{ncol (chondro)}
\end_layout

\end_inset

 data columns two for the spatial information plus 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Robject{
\backslash
$spc}
\end_layout

\end_inset

.
 These informations can be directly obtained by 
\end_layout

\begin_layout Scrap
<<nwl>>=
\begin_inset Newline newline
\end_inset

nrow (chondro)
\begin_inset Newline newline
\end_inset

nwl (chondro)
\begin_inset Newline newline
\end_inset

ncol (chondro)
\begin_inset Newline newline
\end_inset

dim (chondro)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
The names of the columns in 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{@data}
\end_layout

\end_inset

 are accessed by
\end_layout

\begin_layout Scrap
<<names>>=
\begin_inset Newline newline
\end_inset

colnames (chondro)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Likewise, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rmethod{rownames}
\end_layout

\end_inset

 returns the names assigned to the spectra, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rmethod{dimnames}
\end_layout

\end_inset

 yields a list of these three vectors (including also the column names of
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Robject{
\backslash
$spc}
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Section
Plotting
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rpackage{hyperSpec}
\end_layout

\end_inset

 comes with three predefined plotting functions.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotspc}
\end_layout

\end_inset

 plots the spectra, i.
\begin_inset space ~
\end_inset

e.
 
the intensities 
\lang english

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{
\backslash
$spc}
\end_layout

\end_inset

 over the wavelengths 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{@wavelength}
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotmap}
\end_layout

\end_inset

 plots a false color map: a single value (e.
\begin_inset space \thinspace{}
\end_inset

g.
 average intensity or cluster membership) over two data columns (default
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{
\backslash
$x}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{
\backslash
$y}
\end_layout

\end_inset

).
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotc}
\end_layout

\end_inset

 plots a time series or calibration plot: e.
\begin_inset space \thinspace{}
\end_inset

g.
 an intensity over a single other data column (like concentration, depth,
 or time).
\end_layout

\begin_layout Standard
All three plus some more handy abbrevations are also accessible via 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rmethod{plot}
\end_layout

\end_inset

:
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plot (flu, "spc")}
\end_layout

\end_inset

 equivalent to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotspc (flu)}
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plot (chondro, "spcmeansd")}
\end_layout

\end_inset

 plot mean spectrum
\begin_inset Formula $\pm$
\end_inset

1 standard deviation
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plot (chondro, "spcprctl")}
\end_layout

\end_inset

 plot median, 16
\begin_inset Formula $^{\text{th}}$
\end_inset

 and 84
\begin_inset Formula $^{\text{th}}$
\end_inset

 percentile.
 This is similar to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{"spcmeansd"}
\end_layout

\end_inset

.
 Spectroscopic data frequently are not gaussian distributed.
 The percentiles give a better idea of the true distribution.
 They are also less sensitive to outliers.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plot (chondro, "spcprctl5")}
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{"spcprctl"}
\end_layout

\end_inset

 plus 5
\begin_inset Formula $^{\text{th}}$
\end_inset

 and 95
\begin_inset Formula $^{\text{th}}$
\end_inset

percentile.
\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plot (chondro, "map")}
\end_layout

\end_inset

 equivalent to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotmap (chondro)}
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plot (flu, "c")}
\end_layout

\end_inset

 equivalent to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotc (flu)}
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plot (laser, "ts")}
\end_layout

\end_inset

 a time series plot, equivalent to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotc (laser, use.c = "t")}
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plot (x, "depth")}
\end_layout

\end_inset

 a depth profile plot, equivalent to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotc (laser, use.c = "z")}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset

 shows some example plots.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setkeys{Gin}{width = .5
\backslash
textwidth}
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

<<plotspc, fig = TRUE, width = 5, height = 5, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

plotspc (flu)
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

<<plotspcmeansd, fig = TRUE, width = 5, height = 5, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

plot (chondro, "spcmeansd")
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

<<plotc, fig = TRUE, width = 5, height = 5, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

plotc (flu)
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

<<plotmap, fig = TRUE, width = 5, height = 5, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

print (plotmap (chondro))
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Some example plots.
 From left to right: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotspc (flu)}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plot (chondro, "spcmeansd")}
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotc (flu)}
\end_layout

\end_inset

, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Rcode{plotmap (chondro)}
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Session information
\end_layout

\begin_layout Standard
R session information:
\end_layout

\begin_layout Scrap
<<sessionInfo, results=tex>>=
\begin_inset Newline newline
\end_inset

toLatex(sessionInfo())
\begin_inset Newline newline
\end_inset

@
\end_layout

\end_body
\end_document
