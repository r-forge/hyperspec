#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass literate-scrartcl
\begin_preamble
% Meta information - fill between {} and do not remove %
% \VignetteIndexEntry{hyperSpec Introduction}
% \VignetteKeywords{hyperspec}
% \VignettePackage{hyperSpec}
\AtBeginDocument{
\fvset{listparameters={\setlength{\topsep}{0pt}}} 
\renewenvironment{Schunk}{\vspace{\topsep}\begin{small}}{\end{small}\vspace{\topsep}
} 
\SweaveOpts{pgf = FALSE, eps = FALSE, external = FALSE, pdf = TRUE, keep.source = TRUE, strip.white = TRUE}
}

% my preferred packages
\usepackage{xspace}
\usepackage{tikz}
\usepackage{subfig}
\usepackage{booktabs}

\newcommand{\rcm}[1]{\ensuremath{#1\;\mathrm{cm^{-1}}}\xspace}
\newcommand{\code}[1]{\nohyphens{\texttt{#1}}\xspace}
\newcommand{\hy}{\nohyphens{\texttt{hyperSpec}}\xspace}
\newcommand{\R}{\texttt{R}\xspace}
\end_preamble
\options a4paper, 10pt, smallheadings, DIV12
\use_default_options false
\begin_modules
logicalmkup
\end_modules
\language english
\inputencoding utf8x
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "hyperSpec Introduction"
\pdf_author "C. Beleites"
\pdf_subject "Introduction on the R package hyperSpec"
\pdf_keywords "hyperSpec"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine natbib_numerical
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 Introduction 
\end_layout

\begin_layout Author
Claudia Beleites (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

cbeleites@units.it
\end_layout

\end_inset

)
\begin_inset Newline newline
\end_inset

CENMAT, DMRN, University of Trieste
\end_layout

\begin_layout Scrap
<<startup, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

options(SweaveHooks=list(fig=function() par(mar = c (4.1, 4.1, 1, .6), family="seri
f"))) 
\begin_inset Newline newline
\end_inset

options ("width" = 100)
\begin_inset Newline newline
\end_inset

datadir <- "~/Uni/workspace/hyperspec.rforge/Vignettes/intro"
\begin_inset Newline newline
\end_inset

wd <- getwd ()
\begin_inset Newline newline
\end_inset

setwd (datadir)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 is a R package that allows convenient handling of (hyper)spectroscopic
 data sets, i.
\begin_inset space \thinspace{}
\end_inset

e.
 data sets comprising spectra together with further data on a per-spectrum
 basis.
 Likewise, the spectra can be anything that is recorded over a common discretize
d axis, the wavelength axis.
 Throughout the documentation of the package, the terms intensity and wavelength
 refer to the spectral ordinate and abscissa, respectively.
 
\end_layout

\begin_layout Standard
However, 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 works perfectly fine with any data that fits in that general scheme, so
 that the three terms may also be used for:
\end_layout

\begin_layout Description
wavelength: frequency, wavenumbers, chemical shift, Raman shift, 
\begin_inset Formula $\frac{m}{z}$
\end_inset

, etc.
\end_layout

\begin_layout Description
intensity: transmission, absorbance, 
\begin_inset Formula $\frac{e^{-}}{s}$
\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textellipsis
\end_layout

\end_inset


\end_layout

\begin_layout Description
extra
\begin_inset space ~
\end_inset

data: spatial information (spectral images, maps, or profiles), temporal
 information (kinetics, time series), concentrations (calibration series),
 class membership information, etc.
 
\begin_inset Newline newline
\end_inset

Note that there is no restriction on the number of extra data columns.
\end_layout

\begin_layout Standard
This vignette gives an introduction on basic working techniques using the
 R package 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

.
 It comes with three data sets, 
\end_layout

\begin_layout Description
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
chondro
\end_layout

\end_inset

 a Raman map of chondrocytes in cartilage,
\end_layout

\begin_layout Description
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
flu
\end_layout

\end_inset

 a set of fluorescence spectra of a calibration series, and
\end_layout

\begin_layout Description
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
laser
\end_layout

\end_inset

 a time series of an unstable taser emission
\end_layout

\begin_layout Standard
In this vignette, all three data sets are used in an indermixed way to illustrat
e appropriate procedures for different tasks.
 
\end_layout

\begin_layout Subsection
Notation
\end_layout

\begin_layout Standard
This vignette demonstrates working techniques mostly from a spectroscopic
 point of view: rather than going through the functions provided by 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

, it is organized more closely on spectroscopic tasks.
 However, the functions discussed are printed on the margin for a fast overview.
 
\end_layout

\begin_layout Standard
In R, slots of a S4 class can be accessed directly by the 
\begin_inset Flex Rcommand
status open

\begin_layout Plain Layout
@
\end_layout

\end_inset

 operator.
 In this vignette, the notation 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@xxx
\end_layout

\end_inset

 will thus mean 
\emph on

\begin_inset Quotes eld
\end_inset

slot xxx of an object
\emph default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Likewise, named elements of a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
list
\end_layout

\end_inset

, like the columns of a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

, are accessed by the 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$
\end_layout

\end_inset

 operator, and 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$xxx
\end_layout

\end_inset

 will be used for 
\emph on

\begin_inset Quotes eld
\end_inset

column xxx
\emph default

\begin_inset Quotes erd
\end_inset

, and as an abbrevation for 
\emph on

\begin_inset Quotes eld
\end_inset

column xxx of the data.frame in slot data of the object
\begin_inset Quotes erd
\end_inset


\emph default
.
\end_layout

\begin_layout Section
Remarks on R
\end_layout

\begin_layout Subsection
Generic Functions
\end_layout

\begin_layout Standard

\emph on
Generic Functions
\emph default
 are functions that apply to a wide range of data types or classes, e.
\begin_inset space \thinspace{}
\end_inset

g.
 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
plot
\end_layout

\end_inset

, 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

, mathematical operators, etc.
 These functions can be implemented in a specialized way by each class.
 
\end_layout

\begin_layout Standard
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 implements with a variety of such functions, see table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Generic-methods"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Generic-methods"

\end_inset

Generic methods implemented by 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 and some related functions.
 
\emph on
Emphasized
\emph default
 names indicate non-generic functions that are closely related to the generic
 functions in the row.
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{small}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="22" columns="2">
<features footBottomDL="true">
<column alignment="left" valignment="top" width="25text%">
<column alignment="left" valignment="top" width="60text%">
<row interlinespace="1em" endhead="true">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
toprule
\end_layout

\end_inset


\series bold
Function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
cmidrule(lr){1-1}
\backslash
cmidrule(lr){2-2}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
show
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
summary
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
print information about the object
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plot
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
plotting
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

,
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[]]
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
$
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
extract parts of an object
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[<-
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[<-
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
$<-
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
assign parts of an object
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
dim
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
ncol
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
nrow
\end_layout

\end_inset

, 
\emph on
nwl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the dimensions of the object
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
colnames
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
rownames
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
dimnames
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
names of the spectra, data columns, and both plus the names of the wavelengths
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
labels
\end_layout

\end_inset

, 
\emph on

\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout

\emph on
labels<-
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
labels for axis annotations etc.
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
+ - * ^ %% %/% / %*%
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
arithmetical operators work on 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
> < == >= <=
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
comparison operators work on 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
log
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
log10
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
exp
\end_layout

\end_inset

, etc.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
basic math functions work on 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

, see also 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
? "hyperSpec Math"
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
min
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
max
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
range
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
minimum, maximum, and range of the intensities in 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
cbind
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
rbind
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
combine two objects by columns or rows
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
split
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
split an object into a list of objects
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
apply
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
apply a function row- or column-wise, calculate e.
\begin_inset space ~
\end_inset

g.
 the mean spectrum or normalization factors
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
aggregate
\end_layout

\end_inset

(
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
ave
\end_layout

\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
calculate sum characteristics for groups of spectra, e.
\begin_inset space ~
\end_inset

g.
 cluster mean spectra.
 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

's 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
aggregate
\end_layout

\end_inset

 method covers also the functionality of 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
ave
\end_layout

\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
sweep
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

sweep
\begin_inset Quotes erd
\end_inset

 a sum characteristic over rows or columns, e.
\begin_inset space ~
\end_inset

g.
 center the data by substracting the mean spectrum.
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
as.character
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
as.matrix
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
as.data.frame
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
type conversion functions
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
initialize
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create an object
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
validObject
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
validity checking
\end_layout

\end_inset
</cell>
</row>
<row interlinespace="1em">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
bottomrule
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{small}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
S4 Classes Can be Extended at Runtime
\end_layout

\begin_layout Standard
The concept of S4 classes offers more flexibility than the class concepts
 in many other programming languages.
 Functions may be added or changed by the user in his 
\emph on
workspace
\emph default
 at any time.
 Neither restart of R nor reloading of the package or anything the like
 is needed.
 At the same time, the original function is not deleted, it is just masked
 by the user's new function but stays accessible if the change should be
 reverted.
\end_layout

\begin_layout Standard
This offers the opportunity of easily writing specialized functions that
 are adapted to specific tasks.
\end_layout

\begin_layout Subsection
Validity
\end_layout

\begin_layout Standard
S4 classes have a mechanism to define and enforce that the data actually
 stored in the object is appropriate for this class.
 In other words, there is a mechanism of 
\emph on
validity checking
\emph default
.
\end_layout

\begin_layout Standard
The functions provided by 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 do check the validity of 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 objects at the beginning, and --- if the validity could be broken by inappropra
te arguments --- also before leaving the function.
\end_layout

\begin_layout Section
Loading the package
\end_layout

\begin_layout Standard
To load 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

, use
\end_layout

\begin_layout Scrap
<<init>>=
\begin_inset Newline newline
\end_inset

library (hyperSpec)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
The structure of 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 objects
\end_layout

\begin_layout Standard
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 is a S4 (or new-style) class.
 It has four so-called 
\emph on
slots
\emph default
 that hold the data: 
\end_layout

\begin_layout Description
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
wavelength
\end_layout

\end_inset

 containing a numeric vector with the wavelength axis of the spectra.
\end_layout

\begin_layout Description
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
data
\end_layout

\end_inset

 a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

with the spectra and all further information belonging to the spectra
\end_layout

\begin_layout Description
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
label
\end_layout

\end_inset

 a list with appropriate labels (particularly for axis annotations) 
\end_layout

\begin_layout Description
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
log
\end_layout

\end_inset

 a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

 keeping track of what is done with the object
\end_layout

\begin_layout Standard
However, it is good practice to use the functions provided by 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 to handle the objects rather than accessing the slots directly.
 This also helps ensuring that proper (
\emph on
valid
\emph default
) objects are retained.
 
\end_layout

\begin_layout Standard
Most of the data is stored in 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@data
\end_layout

\end_inset

.
 This 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

 has one special column, 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

.
 It is the column that actually contains the spectra.
 The spectra are stored in a matrix inside this column, as illustrated in
 figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:structure"

\end_inset

.
 Even if there are no spectra, 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

 must still be present but it can contain a matrix with zero columns.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset CommandInset include
LatexCommand include
filename "Strukturhyperspec.tex"

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:structure"

\end_inset

The stucture of the data in a 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Slot 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@label
\end_layout

\end_inset

 contains an element for each of the columns in 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@data
\end_layout

\end_inset

 plus one holding the label for the wavelength axis, 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
.wavelength
\end_layout

\end_inset

.
 The elements of the list may be anything suitable for axis annotations,
 i.
\begin_inset space \thinspace{}
\end_inset

e.
 they should be either character strings or expressions for prettier axis
 annotations (see figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:example-plots"

\end_inset

).
 To get familiar with expressions for axis annotition, see 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
? plotmath
\end_layout

\end_inset

 and 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
demo (plotmath)
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Obtaining Basic Information about 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 Objects
\end_layout

\begin_layout Standard
As usual, the 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
print
\end_layout

\end_inset

 and 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
show
\end_layout

\end_inset

 methods display information about the object, and 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
summary
\end_layout

\end_inset

 yields some additional details about the data handling done so far:
\end_layout

\begin_layout Scrap
<<print>>=
\begin_inset Newline newline
\end_inset

chondro
\begin_inset Newline newline
\end_inset

summary (chondro)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The data set 
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
chondro
\end_layout

\end_inset

 consists of 
\begin_inset Flex Sexpr
status open

\begin_layout Plain Layout
nrow (chondro)
\end_layout

\end_inset

 spectra with 
\begin_inset Flex Sexpr
status open

\begin_layout Plain Layout
nwl (chondro)
\end_layout

\end_inset

 data points each, and 
\begin_inset Flex Sexpr
status open

\begin_layout Plain Layout
ncol (chondro)
\end_layout

\end_inset

 data columns two for the spatial information plus 
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

.
 These informations can be directly obtained by 
\end_layout

\begin_layout Scrap
<<nwl>>=
\begin_inset Newline newline
\end_inset

nrow (chondro)
\begin_inset Newline newline
\end_inset

nwl (chondro)
\begin_inset Newline newline
\end_inset

ncol (chondro)
\begin_inset Newline newline
\end_inset

dim (chondro)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The names of the columns in 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@data
\end_layout

\end_inset

 are accessed by
\end_layout

\begin_layout Scrap
<<names>>=
\begin_inset Newline newline
\end_inset

colnames (chondro)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Likewise, 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
rownames
\end_layout

\end_inset

 returns the names assigned to the spectra, and 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
dimnames
\end_layout

\end_inset

 yields a list of these three vectors (including also the column names of
 
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Section
Creating a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 Object, Data Import and Export
\end_layout

\begin_layout Subsection
ASCII Files
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
read.txt.long
\end_layout

\end_inset

,
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
read.txt.wide
\end_layout

\end_inset

,
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
write.txt.long
\end_layout

\end_inset

,
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
write.txt.wide
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Currently, 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 provides four functions for general ASCII data import and export: 
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
read.txt.long
\end_layout

\end_inset

 import long format ASCII files, i.e.
 one intensity value per row
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
read.txt.wide
\end_layout

\end_inset

 import wide format ASCII files, i.e.
 one spectrum per row
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
write.txt.long
\end_layout

\end_inset

 export long format ASCII files
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
write.txt.wide
\end_layout

\end_inset

 export wide format ASCII files
\end_layout

\begin_layout Standard
The import functions immediately return a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object.
\end_layout

\begin_layout Subsection
Manufacturer Specific Import Functions
\end_layout

\begin_layout Standard
Many spectrometer manufacturers provide a function to export their spectra
 into ASCII files.
 The functions discussed in the previous section are written in a very general
 way, and are highly customizable.
 I recommend wrapping these calls with the appropriate settings for your
 spectra format in an import function.
 You may also consider contributing such import filters to 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

: send me (
\begin_inset CommandInset href
LatexCommand href
target "cbeleites@units.it"
type "mailto:"

\end_inset

) the documented code (either .R + .R file or Roxygen commented .R).
\end_layout

\begin_layout Standard
For the long ASCII format written by Renishaw's converter, a more optimized
 import function is already available: 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
scan.txt.Renishaw
\end_layout

\end_inset

.
 
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
scan.txt.Renishaw
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Scrap
<<scan.txt.Renishaw>>=
\begin_inset Newline newline
\end_inset

paracetamol <- scan.txt.Renishaw ("paracetamol.txt", "spc")
\begin_inset Newline newline
\end_inset

paracetamol 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsection
Matlab Files
\end_layout

\begin_layout Standard
Matlab files can be read and written using the package 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
R.matlab
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "R.matlab"

\end_inset

, which is available at CRAN and can be installed by 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
install.packages ("R.matlab")
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Creating a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 Object from Spectra Matrix and Wavelength Vector
\end_layout

\begin_layout Standard
Once the data is in R's workspace, a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object is created by 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
initialize ("hyperSpec")
\end_layout

\end_inset

.
 You will usually give the following arguments:
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
spc
\end_layout

\end_inset

 the spectra matrix
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
wavelength
\end_layout

\end_inset

 the wavelength axis vector
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
data
\end_layout

\end_inset

 the extra data
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
label
\end_layout

\end_inset

 a list with the proper labels.
 Do not forget the wavelength axis label in 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$.wavelength
\end_layout

\end_inset

 and the spectral intensity axis label in 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Wavelengths and Spectral Axis
\end_layout

\begin_layout Subsection
Wavelength Indices
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
wl2i
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
i2wl
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Spectra in 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 have always discretized wavelength axes, they are stored in a matrix with
 column corresponding to one wavelength.
 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 provides two conversion functions: 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
i2wl
\end_layout

\end_inset

 returns the wavelength corrisponding to the given indices and 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
wl2i
\end_layout

\end_inset

 calculates index vectors from wavelengths.
 
\end_layout

\begin_layout Standard
If the wavelengths are given as a numeric vector, they are each converted
 to the corresponding wavelength.
 In addition there is a more sophioticated possibility of specifying wavelength
 ranges using a 
\emph on
formula
\emph default
.
 The basic syntax is 
\emph on
start
\begin_inset space ~
\end_inset


\emph default

\begin_inset Formula $\sim$
\end_inset


\begin_inset space ~
\end_inset


\emph on
end.

\emph default
 This yields a vector 
\emph on
index of start 
\emph default

\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
:
\end_layout

\end_inset


\emph on
 index of end.
\end_layout

\begin_layout Standard
The result of the formula conversion differs from the numeric vector conversion
 in three ways:
\end_layout

\begin_layout Itemize
The colon operator for constructing vectors accepts only integer numbers,
 the tilde (for formulas) does not have this restriction.
\end_layout

\begin_layout Itemize
If the vector does not take into account the spectral resolution, one may
 get only every 
\begin_inset Formula $n^{th}$
\end_inset

 point or repetitions of the same index:
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<wl2ivec>>=
\end_layout

\begin_layout Plain Layout

wl2i (flu, 405 : 410)
\end_layout

\begin_layout Plain Layout

wl2i (chondro, 1000 : 1010)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If the object's wavelength axis is not ordered, the formula approach doesn't
 work.
 In that (rare) case, use 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
orderwl
\end_layout

\end_inset

 first to obtain an object with ordered wavelength axis.
\end_layout

\begin_layout Standard

\emph on
start
\emph default
 and 
\emph on
end
\emph default
 may contain the special variables 
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
min
\end_layout

\end_inset

 and 
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
max
\end_layout

\end_inset

 that correspond to the lowest and highest wavelengths of the object:
\end_layout

\begin_layout Scrap
<<wl2i.minmax>>=
\begin_inset Newline newline
\end_inset

wl2i (flu, min ~ 410)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Often, specifications like 
\emph on
wavelength ± n data points
\emph default
 are needed.
 They can be given using complex numbers in the formula.
 The imagnary part is added to the index calculated from the wavelenght
 in the real part:
\end_layout

\begin_layout Scrap
<<wl2i.im>>=
\begin_inset Newline newline
\end_inset

wl2i (flu, 450 - 2i ~ 450 + 2i)
\begin_inset Newline newline
\end_inset

wl2i (flu, max - 2i ~ max)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
To specify several wavelength ranges, use a list containing the formulas
 and vectors
\begin_inset Foot
status open

\begin_layout Plain Layout
Formulas are combined to a list by 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
c
\end_layout

\end_inset

.
\end_layout

\end_inset

:
\end_layout

\begin_layout Scrap
<<wl2i.list>>=
\begin_inset Newline newline
\end_inset

wl2i (flu, 450 - 2i ~ 450 + 2i)
\begin_inset Newline newline
\end_inset

wl2i (flu, c (min ~ 406.5, max - 2i ~ max))
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
This mechanism also works for the wavelength arguments of 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[]]
\end_layout

\end_inset

, and 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotspc
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Accessing the Extra Data 
\end_layout

\begin_layout Standard
The second argument of the extraction functions 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

 and 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[]]
\end_layout

\end_inset

 specifies the (extra) data columns.
 They can be given like any column specification for a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

, i.
\begin_inset space \thinspace{}
\end_inset

e.
 numeric, logical, or by a vector of the column names:
\end_layout

\begin_layout Scrap
<<data>>=
\begin_inset Newline newline
\end_inset

flu [[,1]]
\begin_inset Newline newline
\end_inset

flu [[,-2]]
\begin_inset Newline newline
\end_inset

flu [[,"c"]]
\begin_inset Newline newline
\end_inset

flu [[,c (TRUE, FALSE)]]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
To select one column, the 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$
\end_layout

\end_inset

 operator is more convenient:
\end_layout

\begin_layout Scrap
<<data2>>=
\begin_inset Newline newline
\end_inset

flu$c
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The extra data may also be set this way:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Scrap
<<data3>>=
\begin_inset Newline newline
\end_inset

flu$n <- list (1 : 6, label = "sample no.")
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
This function will append new columns, if necessary.
 
\end_layout

\begin_layout Section
Accessing Parts of the 
\begin_inset Flex Rclass
status collapsed

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 Object
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[]] $.
 $..
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 comes with three abbrevation functions for easy access to the data:
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[]]
\end_layout

\end_inset

 returns the spectra matrix (
\begin_inset Flex Rcode
status collapsed

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

).
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[
\begin_inset Flex Rfunarg
status collapsed

\begin_layout Plain Layout
i
\end_layout

\end_inset

, , 
\begin_inset Flex Rfunarg
status collapsed

\begin_layout Plain Layout
l
\end_layout

\end_inset

]]
\end_layout

\end_inset

 the cut spectr amatrix is returned if wavelengths are specified is 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
l
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[
\begin_inset Flex Rfunarg
status collapsed

\begin_layout Plain Layout
i
\end_layout

\end_inset

, 
\begin_inset Flex Rfunarg
status collapsed

\begin_layout Plain Layout
j
\end_layout

\end_inset

, 
\begin_inset Flex Rfunarg
status collapsed

\begin_layout Plain Layout
l
\end_layout

\end_inset

]]
\end_layout

\end_inset

 If data columns are selected (second index), the result is a 
\begin_inset Flex Rclass
status collapsed

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[
\begin_inset Flex Rfunarg
status collapsed

\begin_layout Plain Layout
i
\end_layout

\end_inset

, , 
\begin_inset Flex Rfunarg
status collapsed

\begin_layout Plain Layout
l
\end_layout

\end_inset

]]<-
\end_layout

\end_inset

 Also, parts of the spectra matrix can be set (only indices for spectra
 and wavelength are allowed for this function).
 
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[
\begin_inset Flex Rfunarg
status collapsed

\begin_layout Plain Layout
i
\end_layout

\end_inset

, 
\begin_inset Flex Rfunarg
status collapsed

\begin_layout Plain Layout
j
\end_layout

\end_inset

]<-
\end_layout

\end_inset

 sets parts of 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@data
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status collapsed

\begin_layout Plain Layout
$.
\end_layout

\end_inset

 returns the complete 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@data
\end_layout

\end_inset

, with the spectra in column 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status collapsed

\begin_layout Plain Layout
$..
\end_layout

\end_inset

 returns the extra data (
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@data
\end_layout

\end_inset

 without 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

).
\end_layout

\begin_layout Description
\begin_inset Flex Rfunction
status collapsed

\begin_layout Plain Layout
$..<-
\end_layout

\end_inset

 sets the extra data (
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@data
\end_layout

\end_inset

 without 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

).
 However, the columns must be exactly tha same in this case.
 
\end_layout

\begin_layout Section
Selecting and Deleting Spectra
\end_layout

\begin_layout Standard
The extraction function 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

 (or 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[]]
\end_layout

\end_inset

, if the spectra 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
matrix
\end_layout

\end_inset

 or the 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

 is needed rather than a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object) takes the spectra as first argument.
 It may be a vector giving the indices of the spectra to extract (select),
 a vector with negative indices indicating which spectra should be deleted,
 or a logical 
\end_layout

\begin_layout Scrap
<<delspc>>=
\begin_inset Newline newline
\end_inset

flu [1 : 3]
\begin_inset Newline newline
\end_inset

flu [-3]
\begin_inset Newline newline
\end_inset

chondro  [chondro$y > 10]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
Plotting
\end_layout

\begin_layout Standard
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 comes with three predefined plotting functions.
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotspc
\end_layout

\end_inset

 plots the spectra, i.
\begin_inset space ~
\end_inset

e.
 the intensities 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

 over the wavelengths 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@wavelength
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotmap
\end_layout

\end_inset

 plots a false color map: a single value (e.
\begin_inset space \thinspace{}
\end_inset

g.
 average intensity or cluster membership) over two data columns (default
 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$x
\end_layout

\end_inset

 and 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$y
\end_layout

\end_inset

).
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotc
\end_layout

\end_inset

 plots a time series or calibration plot: e.
\begin_inset space \thinspace{}
\end_inset

g.
 an intensity over a single other data column (like concentration, depth,
 or time).
\end_layout

\begin_layout Standard
All three plus some more handy abbrevations are also accessible via 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
plot
\end_layout

\end_inset

:
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plot
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (flu, "spc")
\end_layout

\end_inset

 is equivalent to 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotspc (flu)
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (chondro, "spcmeansd")
\end_layout

\end_inset

 plots mean spectrum 
\begin_inset Formula $\pm$
\end_inset

 1 standard deviation
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (chondro, "spcprctl")
\end_layout

\end_inset

 plots median, 16
\begin_inset Formula $^{\text{th}}$
\end_inset

 and 84
\begin_inset Formula $^{\text{th}}$
\end_inset

 percentile.
 This is similar to 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
"spcmeansd"
\end_layout

\end_inset

.
 Spectroscopic data frequently are not gaussian distributed.
 The percentiles give a better idea of the true distribution.
 They are also less sensitive to outliers.
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (chondro, "spcprctl5")
\end_layout

\end_inset

 like 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
"spcprctl"
\end_layout

\end_inset

 plus 5
\begin_inset Formula $^{\text{th}}$
\end_inset

 and 95
\begin_inset Formula $^{\text{th}}$
\end_inset

percentile.
\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (chondro, "map")
\end_layout

\end_inset

 is equivalent to 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotmap (chondro)
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (flu, "c")
\end_layout

\end_inset

 is equivalent to 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotc (flu)
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (laser, "ts")
\end_layout

\end_inset

 plots a time series plot, equivalent to 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotc (laser, use.c = "t")
\end_layout

\end_inset


\end_layout

\begin_layout Description
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (x, "depth")
\end_layout

\end_inset

 plots a depth profile plot, equivalent to 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotc (laser, use.c = "z")
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:example-plots"

\end_inset

 shows some example plots.
\end_layout

\begin_layout Standard
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plot
\end_layout

\end_inset

 uses its second argument to determine which of the three specialized plot
 functions to call.
 All further arguments are handed over to this function.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap

\backslash
setkeys{Gin}{width = .245
\backslash
textwidth}
\begin_inset Newline newline
\end_inset


\backslash
subfloat[
\backslash
label{fig-plot-spc}]{
\begin_inset Newline newline
\end_inset

<<plotspc, fig = TRUE, width = 4, height = 3, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

plotspc (flu)
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\backslash
subfloat[
\backslash
label{fig-plot-spcmeansd}]{
\begin_inset Newline newline
\end_inset

<<plotspcmeansd, fig = TRUE, width = 4, height = 3, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

plot (chondro, "spcmeansd")
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\backslash
subfloat[
\backslash
label{fig-plot-c}]{
\begin_inset Newline newline
\end_inset

<<plotc, fig = TRUE, width = 4, height = 3, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

plotc (flu)
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\backslash
subfloat[
\backslash
label{fig-plot-map}]{
\begin_inset Newline newline
\end_inset

<<plotmap, fig = TRUE, width = 4, height = 3, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

print (plotmap (chondro))
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:example-plots"

\end_inset

Some example plots.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subref{fig-plot-spc}
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotspc (flu)
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subref{fig-plot-spcmeansd}
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (chondro, "spcmeansd")
\end_layout

\end_inset

, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subref{fig-plot-c}
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotc (flu)
\end_layout

\end_inset

, and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subref{fig-plot-map}
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotmap (chondro)
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plotting Spectra 
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotspc
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotspc
\end_layout

\end_inset

 offers a variety of parameters for customized plots.
 To plot ...
\end_layout

\begin_layout Description
with
\begin_inset space ~
\end_inset

reversed
\begin_inset space ~
\end_inset

abscissa use 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
wl.reverse = TRUE
\end_layout

\end_inset


\end_layout

\begin_layout Description
in
\begin_inset space ~
\end_inset

different
\begin_inset space ~
\end_inset

colors colors use 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
col = vector.of.colors
\end_layout

\end_inset


\end_layout

\begin_layout Description
dots
\begin_inset space ~
\end_inset

instead
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

lines use 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
lines.args = list (pch = 20, type = "p")
\end_layout

\end_inset


\end_layout

\begin_layout Description
mass
\begin_inset space ~
\end_inset

spectra use 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
lines.args = list (type = "h")
\end_layout

\end_inset


\end_layout

\begin_layout Description
particular
\begin_inset space ~
\end_inset

wavelength
\begin_inset space ~
\end_inset

ranges use 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
wl.range = list (600 ~ 1800, 2800 ~ 3100)
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

If 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
wl.range
\end_layout

\end_inset

 already contains indices: use 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
wl.index = TRUE
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Cut the wavelength axis appropriately with 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
xoffset = 800
\end_layout

\end_inset


\end_layout

\begin_layout Description
stacked
\begin_inset space ~
\end_inset

spectra use 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
stacked = TRUE
\end_layout

\end_inset


\end_layout

\begin_layout Description
more
\begin_inset space ~
\end_inset

spectra
\begin_inset space ~
\end_inset

into
\begin_inset space ~
\end_inset

an
\begin_inset space ~
\end_inset

existing
\begin_inset space ~
\end_inset

plot use
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
add = TRUE
\end_layout

\end_inset


\end_layout

\begin_layout Description
with
\begin_inset space ~
\end_inset

different
\begin_inset space ~
\end_inset

line
\begin_inset space ~
\end_inset

at
\begin_inset space ~
\end_inset

I
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

0 use 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
zeroline = 
\emph on
list.of.arguments.to.abline
\end_layout

\end_inset

.
 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
NULL
\end_layout

\end_inset

suppresses the line.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap

\backslash
setkeys{Gin}{width = .33
\backslash
textwidth}
\begin_inset Newline newline
\end_inset


\backslash
subfloat[
\backslash
label{fig-plotspc-ms}]{
\begin_inset Newline newline
\end_inset

<<ms, fig = TRUE, width = 8, height = 5, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

fake.mass.spec <- new ("hyperSpec", spc = matrix (100*runif (25), nrow = 1),
 
\begin_inset Newline newline
\end_inset

   wavelength = 1 : 25 + 28,
\begin_inset Newline newline
\end_inset

   label = list (spc = expression (e^"-" / s), .wavelength = expression (m
 / z)))
\begin_inset Newline newline
\end_inset

plot (fake.mass.spec, lines.args = list (type = "h"))
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\backslash
subfloat[
\backslash
label{fig-plotspc-paracetamol}]{
\begin_inset Newline newline
\end_inset

<<plotspcadd, fig = TRUE, width = 8, height = 5, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

plot (paracetamol, wl.range = c (300 ~ 1800, 2800 ~ max), xoffset = 850,
 wl.reverse = TRUE, col = "blue")
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\backslash
subfloat[
\backslash
label{fig-plotmap-factor}]{
\begin_inset Graphics
	filename introduction-clustmap.pdf
	width 33text%

\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Arguments to 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotspc
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subref{fig-plotspc-ms}
\end_layout

\end_inset

 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (fake.mass.spec, lines.args = list (type = "h"))
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subref{fig-plotspc-paracetamol}
\end_layout

\end_inset

 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotspc (paracetamol, wl.range = c (300 ~ 1800, 2800 ~ max), xoffset = 850,
 wl.reverse = TRUE)
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subref{fig-plotmap-factor}
\end_layout

\end_inset

 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotmap (chondro, z = cut(chondro[[, , 1006]], 3)) 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Calibration Plots, (Depth) Profiles, and Time Series Plots
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotc
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotc
\end_layout

\end_inset

 plots an intensity over one of the extra data columns.
 The abscissa uses column 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$c
\end_layout

\end_inset

 by default, another colum can be specifiedusing 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
use.c
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
= name
\end_layout

\end_inset

.
 The ordinate can be calculated as a sum characteristic (with parameter
 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
func
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
= function
\end_layout

\end_inset

, defaulting to 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
sum
\end_layout

\end_inset

).
 If parameter 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
z
\end_layout

\end_inset

is given, these values are used instead.
 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
z
\end_layout

\end_inset

may be the name of an extra data column, or a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
numeric
\end_layout

\end_inset

 that should be used directly.
\end_layout

\begin_layout Standard
To customize the plot, give any arguments that you would usually supply
 to 
\begin_inset Flex Rmethod
status open

\begin_layout Plain Layout
plot
\end_layout

\end_inset

 as a list using argument 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
plot.args
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Plotting False-Color Maps
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotmap
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotmap
\end_layout

\end_inset

 uses 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
levelplot
\end_layout

\end_inset

, a 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
lattice
\end_layout

\end_inset

 function.
 Therefore, in loops, functions, Sweave chunks, etc.
 the lattice object needs to be printed explicitly by 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
print (plotmap (object))
\end_layout

\end_inset

 (
\begin_inset CommandInset href
LatexCommand href
name "R FAQ: Why do lattice/trellis graphics not work?"
target "http://cran.r-project.org/doc/FAQ/R-FAQ.html#Why-do-lattice_002ftrellis-graphics-not-work_003f"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotmap
\end_layout

\end_inset

 produces a 3d plot, with the 
\begin_inset Formula $z$
\end_inset

 axis color-coded.
 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotmap
\end_layout

\end_inset

's arguments 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
x
\end_layout

\end_inset

 and 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
y
\end_layout

\end_inset

 take the name of extra data columns.
\end_layout

\begin_layout Paragraph
The color-coded axis.
 
\end_layout

\begin_layout Standard
Also 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
z
\end_layout

\end_inset

can be used to select one column of the extra data by name.
 Alternatively, it may be a numeric or factor directy giving the values
 to be used.
 Each level of a factor will have one color.
 It is also possible to plot a sum caracteristic of the spectra: supply
 the function in argument 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
func
\end_layout

\end_inset

.
 The default setting is to plot the average intensity (no 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
z
\end_layout

\end_inset

and 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
func
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
= mean
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
To plot with a different palette, use 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
trellis.args
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
= list (col.regions = palette)
\end_layout

\end_inset

.
\end_layout

\begin_layout Paragraph
Conditioning.
\end_layout

\begin_layout Standard
Lattice graphics have a concept of conditioning a plot.
 Instead of plotting all data in one diagram, a diagram is produced for
 each of the groups specified by the condition.
 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
plotmap
\end_layout

\end_inset

's argument 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
cond
\end_layout

\end_inset

 takes he name of the extra data column used for conditioning.
 This could e.
\begin_inset space \thinspace{}
\end_inset

g.
 be a column containing the sample number of a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object that contains several samples.
 
\end_layout

\begin_layout Section
Spectral (Pre)processing
\end_layout

\begin_layout Subsection
Cutting the Spectral Range
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[]]
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The extraction functions 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

 and 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[]]
\end_layout

\end_inset

 can be used to cut the spectra: Their third argument takes wavelength specifica
tions as discussed above and also logicals (i.e.
 vectors specifying with 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset

/
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
FALSE
\end_layout

\end_inset

 for each column of 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

 whether it should be included or not.
\begin_inset Newline newline
\end_inset


\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[]
\end_layout

\end_inset

 returns a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
[[]]
\end_layout

\end_inset

 the spectra 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
matrix
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
$spc
\end_layout

\end_inset

 (or the 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
@data
\end_layout

\end_inset

 if data columns were specified, too) only.
\end_layout

\begin_layout Scrap
<<cut.wl>>=
\begin_inset Newline newline
\end_inset

flu [,, min ~ 408.5]
\begin_inset Newline newline
\end_inset

flu [[,, c (min ~ min + 2i, max - 2i ~ max)]]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsection
Spectral Interpolation and Smoothing
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
spc.bin
\end_layout

\end_inset

, 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
spc.loess
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Frequently, a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object needs to be interpolated onto a new wavelength axis.
 e.
\begin_inset space \thinspace{}
\end_inset

g.
 because measurements resulted in slightly shifted wavelength axes.
 Or data from a grating spectrometer with inequal data point spacing should
 be interpolated onto an evenly spaced wavelength axis.
 Also, the spectra can be smoothed: reducing the spectral resolution allows
 to increase the signal to noise ratio.
 For chemometric data analysis reducing the number of data points per spectrum
 may be crucial as it reduces the dimensionality of the data.
\end_layout

\begin_layout Standard
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 provides two functions to change the wavelength axis of 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 objects: 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
spc.bin
\end_layout

\end_inset

 and 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
spc.loess
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
spc.bin
\end_layout

\end_inset

 bins the spectral axis by averaging every 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
by
\end_layout

\end_inset

 data points.
\end_layout

\begin_layout Scrap
<<fig-loess, fig = TRUE, width = 10, height = 5, include = FALSE>>=
\begin_inset Newline newline
\end_inset

plot (paracetamol, wl.range = c (300 ~ 1800, 2800 ~ max), xoffset = 850)
\begin_inset Newline newline
\end_inset

p <- spc.loess (paracetamol, c(seq (300, 1800, 2), seq (2850, 3150, 2)))
\begin_inset Newline newline
\end_inset

plot (p, wl.range = c (300 ~ 1800, 2800 ~ max), xoffset = 850, col = "red",
 add = TRUE)
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

<<fig-loess-kl, fig = TRUE, width = 5, height = 5, include = FALSE, echo
 = FALSE>>=
\begin_inset Newline newline
\end_inset

plot (paracetamol [, , 1600 ~ 1670])
\begin_inset Newline newline
\end_inset

plot (p [, , 1600 ~ 1670], col = "red", add = TRUE)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename introduction-fig-loess.pdf
	width 66text%

\end_inset


\begin_inset Graphics
	filename introduction-fig-loess-kl.pdf
	width 33text%

\end_inset


\end_layout

\begin_layout Captionbelow
\begin_inset CommandInset label
LatexCommand label
name "fig-spcloess"

\end_inset

Smoothing interpolation by 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
spc.loess
\end_layout

\end_inset

 with new data point spacing of 2 cm
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textsuperscript{-1}
\end_layout

\end_inset

.
 The magnification on the right shows how interpolation may cause a loss
 in signal.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
spc.loess
\end_layout

\end_inset

 applies R's 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
loess
\end_layout

\end_inset

 function for spectral interpolation.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig-spcloess"

\end_inset

 shows the result of interpolating from 300 to 1800 and 2850 to 3150 cm
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textsuperscript{-1}
\end_layout

\end_inset

 with 2 cm
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textsuperscript{-1}
\end_layout

\end_inset

 data point distance.
 This correspends to a spectral resolution of about 4 cm
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textsuperscript{-1}
\end_layout

\end_inset

, and the decrease in spectral resolution can be seen at tha sharp bands
 where the maxima are not reached (due to the eact that the interpolation
 wavelength axis does not necessarily hit the maxima.
 The original spectrum had 
\begin_inset Flex Sexpr
status open

\begin_layout Plain Layout
nwl (paracetamol)
\end_layout

\end_inset

 data points with unequal data point spacing (between 
\begin_inset Flex Sexpr
status open

\begin_layout Plain Layout
signif (min (diff (wl (paracetamol))), 2)
\end_layout

\end_inset

 and 
\begin_inset Flex Sexpr
status open

\begin_layout Plain Layout
signif (max (diff (wl (paracetamol))), 2)
\end_layout

\end_inset

 cm
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textsuperscript{-1}
\end_layout

\end_inset

).
 The interpolated spectrum has 
\begin_inset Flex Sexpr
status open

\begin_layout Plain Layout
nwl (p)
\end_layout

\end_inset

 data points.
 
\end_layout

\begin_layout Subsection
Background Correction
\end_layout

\begin_layout Standard
To substract a background spectrum of each of the spectra in an object,
 use 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
sweep (spectra, 2, background.spectrum, "-")
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Offset Correction
\end_layout

\begin_layout Standard
Calculate the offsets and sweep them off the spectra:
\end_layout

\begin_layout Scrap
<<ofs>>=
\begin_inset Newline newline
\end_inset

offsets <- apply (chondro, 1, min)
\begin_inset Newline newline
\end_inset

chondro.offset.corrected <- sweep (chondro, 1, offsets, "-")
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsection
Baseline Correction
\end_layout

\begin_layout Standard
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 comes with two functions to fit polynomial baselines.
 
\end_layout

\begin_layout Standard
\begin_inset Flex Rfunction
status collapsed

\begin_layout Plain Layout
spc.fit.poly
\end_layout

\end_inset

 fits a polynomual baseline of the given order.
 A least-squares fit is done so that the function may be used on rather
 noisy spectra.
 However, the user must supply an object that is cut appropriately.
 Particularly, the supplied wavelength ranges are not weighted.
 
\end_layout

\begin_layout Standard
\begin_inset Flex Rfunction
status collapsed

\begin_layout Plain Layout
spc.fit.poly.below
\end_layout

\end_inset

 tries to find appropriate support points for the baseline iteratively.
 
\end_layout

\begin_layout Standard
Both functions return a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object containing the fitted baselines.
 They need to be substracted afterwards:
\end_layout

\begin_layout Scrap
<<bl>>=
\begin_inset Newline newline
\end_inset

bl <- spc.fit.poly.below (chondro)
\begin_inset Newline newline
\end_inset

chondro <- chondro - bl
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
For details, see 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
vignette (baselinebelow)
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Intensity Calibration
\end_layout

\begin_layout Subsubsection
Correcting by a constant, e.
\begin_inset space \thinspace{}
\end_inset

g.
 Readout Bias
\end_layout

\begin_layout Standard
CCD cameras often operate with a bias, causing a constant value for each
 pixel.
 Such a constant can be immediately substracted:
\begin_inset Newline newline
\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
spectra - constant
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Correcting Wavelength Dependence
\end_layout

\begin_layout Standard
This means that for each of the wavelenths the same correction needs to
 be applied to all spectra.
\end_layout

\begin_layout Enumerate
There might be wavelength dependent offsets (background or dark spectra).
 They are substracted:
\begin_inset Newline newline
\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
sweep (spectra, 2, offset.spectrum, "-")
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
A multiplicative dependency such as a CCD's photon efficiency: 
\begin_inset Newline newline
\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
sweep (spectra, 2, photon.efficiency, "/")
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Spectra Dependent Correction
\end_layout

\begin_layout Standard
If the correction depends on the spectra (e.
\begin_inset space \thinspace{}
\end_inset

g.
 due to inhomogeneous illumination while collecting imaging data
\begin_inset Foot
status open

\begin_layout Plain Layout
imaging (as opposed to mapping) refers to simultaneously collecting spatially
 resolved spectra, either 2d images or line imaging.
\end_layout

\end_inset

), the 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
MARGIN
\end_layout

\end_inset

of the 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
sweep
\end_layout

\end_inset

 function needs to be 1:
\end_layout

\begin_layout Enumerate
Pixel dependent offsets are substracted:
\begin_inset Newline newline
\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
sweep (spectra, 2, pixel.offsets, "-")
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
A multiplicative dependency: 
\begin_inset Newline newline
\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
sweep (spectra, 2, illumination.factors, "*")
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Normalization
\end_layout

\begin_layout Enumerate
Calculate appropriate normalization factors:
\begin_inset Newline newline
\end_inset


\begin_inset Flex Rcode
status collapsed

\begin_layout Plain Layout
factors <- 1 / apply (spectra, 1, sum)
\end_layout

\end_inset

 for area normalization.
 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
mean
\end_layout

\end_inset

 gives fqual results, just that tha Intensities are on the same scale as
 before.
\begin_inset Newline newline
\end_inset

For minimum-maximum-normalization, first do an offset- or baseline correction,
 then calculate the 
\emph on

\begin_inset Flex Rcode
status collapsed

\begin_layout Plain Layout
factors
\end_layout

\end_inset


\emph default
 using 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
max
\end_layout

\end_inset

.
\begin_inset Newline newline
\end_inset

You may calculate the factors using only a certain wavelength range, thereby
 normalizing on a particalar band or peak.
\end_layout

\begin_layout Enumerate
Again, sweep the factor off the spectra:
\begin_inset Newline newline
\end_inset


\begin_inset Flex Rcode
status collapsed

\begin_layout Plain Layout
normalized <- sweep (spectra, 1, factors, "*")
\end_layout

\end_inset


\end_layout

\begin_layout Scrap
<<norm>>=
\begin_inset Newline newline
\end_inset

factors <- 1 / apply (chondro, 1, mean)
\begin_inset Newline newline
\end_inset

chondro <- sweep (chondro, 1, factors, "*")
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsection
Centering the Data
\end_layout

\begin_layout Standard
Centering means that the mean spectrum is substracted from each of the spectra.
 Many data analysis techniques, like principal component analysis, partial
 least squares, etc., work much better on centered data.
 
\end_layout

\begin_layout Standard
However, from a spectroscopic point of view it depends on the particular
 data set whether centering does make sense or not.
 
\end_layout

\begin_layout Standard
It is perfectly fine to center the 
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
flu
\end_layout

\end_inset

 data set: the inderpretation is that centering he data cancels the offset
 (background spectrum etc.) of the calibration:
\end_layout

\begin_layout Scrap
<<center-flu>>=
\begin_inset Newline newline
\end_inset

flu.centered <- sweep (flu, 2, apply (flu, 2, mean), "-")
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<fig-center-flu, fig = TRUE, width = 10, height = 5, include = FALSE>>=
\begin_inset Newline newline
\end_inset

plot (flu.centered)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
On the other hand, the 
\begin_inset Flex Robject
status open

\begin_layout Plain Layout
chondro
\end_layout

\end_inset

 data set consists of Raman spectra, so the spectroscopic interpretiation
 of centering is getting rid of the the average chemical composition of
 the sample.
 But: what is the meaning of the 
\begin_inset Quotes eld
\end_inset

average spectrum
\begin_inset Quotes erd
\end_inset

 of an inhomogeneous sample? In this case it is better rather want to substract
 the minimum spectrum (which will hopefully have almost the same benefit
 on the data analysis) as it is the spectrum of that chemical composition
 that is underlying the whole sample.
\end_layout

\begin_layout Standard
One more point to consider is that the actual minimum spectrum will pick
 up lots of the negative noise.
 In order to avoid that, using e.
\begin_inset space ~
\end_inset

g.
 the 5
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textsuperscript{th}
\end_layout

\end_inset

 percentile spectrum is more suitable:
\end_layout

\begin_layout Scrap
<<perc>>=
\begin_inset Newline newline
\end_inset

chondro <- sweep (chondro, 2, apply (chondro, 2, quantile, 0.05), "-")
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

<<fig-center-ch, fig = TRUE, width = 10, height = 5, include = FALSE>>=
\begin_inset Newline newline
\end_inset

plot (chondro, "spcprctl5")
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsection
Variance Scaling
\end_layout

\begin_layout Standard
Variance scaling is often used in multivariate analysis to adjust the influence
 and scalung of the variates (that are typically different physical values).
 However, it is hardly appropriate for spetra that do have the same scale
 of the same physical value.
\end_layout

\begin_layout Subsection
Multiplicative Scatter Correction (MSC)
\end_layout

\begin_layout Standard
MSC can be done using 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
msc
\end_layout

\end_inset

from package 
\begin_inset Flex Rpackage
status open

\begin_layout Plain Layout
pls
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Mevik2007"

\end_inset

.
 It operates on the spectra matrix:
\end_layout

\begin_layout Scrap
<<msc, eval = FALSE>>=
\begin_inset Newline newline
\end_inset

library (pls)
\begin_inset Newline newline
\end_inset

chondro.msc <- chondro
\begin_inset Newline newline
\end_inset

chondro.msc [[]] <- msc (chondro [[]])
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsection
Spectral Arithmetic
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status collapsed

\begin_layout Plain Layout
+ - * / ^ log log10
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Basic mathematical functions are defined for 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 objects.
 You may convert spectra:
\begin_inset Newline newline
\end_inset


\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
absorbance.spectra = - log10 (transmission.spectra)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case, do not forget to adapt the label:
\end_layout

\begin_layout Standard
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
labels (absorbance.spectra)$spc <- "A"
\end_layout

\end_inset


\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status collapsed

\begin_layout Plain Layout
labels
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Be careful: R's 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
log
\end_layout

\end_inset

function calculates the natural logarithm if no base is given.
\begin_inset Newline newline
\end_inset

The basic arithmetic operators work element-wise in R.
 Thus they all need either a scalar, or a matrix (or 
\begin_inset Flex Rclass
status collapsed

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object) of the correct size.
\begin_inset Newline newline
\end_inset

Matrix multiplication is done by 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
%*%
\end_layout

\end_inset


\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
%*%
\end_layout

\end_inset


\end_layout

\end_inset

, again each of the operands may be a matrix or a 
\begin_inset Flex Rclass
status collapsed

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object, and must have the correct dimensions.
\end_layout

\begin_layout Section
Data Analysis 
\end_layout

\begin_layout Subsection
Data Analysis Methods using a data.frame
\begin_inset Newline newline
\end_inset

e.
\begin_inset space \thinspace{}
\end_inset

g.
 Principal Component Analysis with 
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
prcomp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Flex Rcode
status collapsed

\begin_layout Plain Layout
$.
\end_layout

\end_inset

 notation is handy, if a data analysis function expects a 
\begin_inset Flex Rclass
status open

\begin_layout Plain Layout
data.frame
\end_layout

\end_inset

.
 The column names can then be used in the formula:
\end_layout

\begin_layout Scrap
<<pca>>=
\begin_inset Newline newline
\end_inset

pca <- prcomp (~ spc, data = chondro$., center = FALSE)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Results of such a decomposition can be put again into 
\begin_inset Flex Rclass
status collapsed

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 objects.
 This allows to plot e.g.
 the loading like spectra, or score maps, see figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pca"

\end_inset

.
\end_layout

\begin_layout Scrap
<<decomp>>=
\begin_inset Newline newline
\end_inset

scores <- decomposition (chondro, pca$x, label.wavelength = "PC", label.spc
 = "score / a.u.")
\begin_inset Newline newline
\end_inset

loadings <- decomposition (chondro, t(pca$rotation), scores = FALSE, label.spc
 = "loading I / a.u.")
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap

\backslash
setkeys{Gin}{width = .495
\backslash
textwidth}
\begin_inset Newline newline
\end_inset


\backslash
subfloat[
\backslash
label{fig-pca-load}]{
\begin_inset Newline newline
\end_inset

<<pca-load, fig = TRUE, width = 8, height = 5, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

plot (loadings [1:3], stacked = TRUE)
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

}
\begin_inset Newline newline
\end_inset


\backslash
subfloat[
\backslash
label{fig-pca-score}]{
\begin_inset Newline newline
\end_inset

<<pca-score, fig = TRUE, width = 8, height = 5, echo = FALSE>>=
\begin_inset Newline newline
\end_inset

print (plotmap (scores [,,2]))
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

}
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pca"

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subref{fig-pca-load}
\end_layout

\end_inset

 The first three loadings: 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plot (loadings [1 : 3], stacked = TRUE)
\end_layout

\end_inset

.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
subref{fig-pca-score}
\end_layout

\end_inset

 The second score map: 
\begin_inset Flex Rcode
status open

\begin_layout Plain Layout
plotmap (scores [, , 2])
\end_layout

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Data Analysis Methods using a matrix
\begin_inset Newline newline
\end_inset

e.
\begin_inset space \thinspace{}
\end_inset

g.
 Hierarchical Cluster Analysis
\end_layout

\begin_layout Scrap
<<hca>>=
\begin_inset Newline newline
\end_inset

dist <- pearson.dist (chondro [[]])
\begin_inset Newline newline
\end_inset

dendrogram <- hclust (dist, method = "ward")
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

<<dend, fig = TRUE, width = 5, height = 5, include = FALSE>>=
\begin_inset Newline newline
\end_inset

plot (dendrogram)
\begin_inset Newline newline
\end_inset

@ 
\end_layout

\begin_layout Standard
In order to plot a cluster map, the cluster membership needs to be calulated
 from the dendrogram.
 
\end_layout

\begin_layout Standard
First, cut tha dendrogam so that three clusters result:
\end_layout

\begin_layout Scrap
<<dendcut>>=
\begin_inset Newline newline
\end_inset

clusters <- cutree (dendrogram, k = 3)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Then the result may be plotted: 
\end_layout

\begin_layout Scrap
<<clustmap, fig = TRUE, width = 7.5, height = 5, include = FALSE, echo =
 FALSE>>=
\begin_inset Newline newline
\end_inset

plotmap (chondro, z = as.factor (clusters), do.print = TRUE)
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
subfloat[

\backslash
label{fig:clust:dend}
\lang english
]{
\end_layout

\end_inset


\begin_inset Graphics
	filename introduction-dend.pdf
	lyxscale 33
	width 33text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout
}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
subfloat[

\backslash
label{fig:clust:map}
\lang english
]{
\end_layout

\end_inset


\begin_inset Graphics
	filename introduction-clustmap.pdf
	lyxscale 33
	width 33text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout
}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

\backslash
subfloat[

\backslash
label{fig:clust:spc}
\lang english
]{
\end_layout

\end_inset


\begin_inset Graphics
	filename introduction-clustmean.pdf
	lyxscale 33
	width 33text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The results of the cluster analysis: 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subref{fig:clust:dend}
\end_layout

\end_inset

 the dendrogram 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subref{fig:clust:mab}
\end_layout

\end_inset

 the map of the 3 clusters 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subref{fig:clust:spc}
\end_layout

\end_inset

 the mean spectra.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Calculating group-wise Sum Characteristics
\begin_inset Newline newline
\end_inset

e.
\begin_inset space \thinspace{}
\end_inset

g.
 Cluster Mean Spectra
\end_layout

\begin_layout Standard
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
aggregate
\end_layout

\end_inset

 applies the function given in 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
FUN
\end_layout

\end_inset

 to each of the groups of spectra specified in 
\begin_inset Flex Rfunarg
status open

\begin_layout Plain Layout
by
\end_layout

\end_inset

.
\begin_inset Marginal
status open

\begin_layout Plain Layout
\begin_inset Flex Rfunction
status open

\begin_layout Plain Layout
aggregate
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
So we may plot the cluster mean spectra:
\end_layout

\begin_layout Scrap
<<clustmean, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
\begin_inset Newline newline
\end_inset

means <- aggregate (chondro, by = clusters, mean)
\begin_inset Newline newline
\end_inset

means
\begin_inset Newline newline
\end_inset

plot (means, col = matlab.palette (3)[means$.aggregate], stacked = TRUE) 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsection
Splitting an Object
\end_layout

\begin_layout Standard
A 
\begin_inset Flex Rclass
status collapsed

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 object may also be split into a list of 
\begin_inset Flex Rclass
status collapsed

\begin_layout Plain Layout
hyperSpec
\end_layout

\end_inset

 objects: 
\end_layout

\begin_layout Scrap
<<split, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
\begin_inset Newline newline
\end_inset

clusters <- split (chondro, clusters)
\begin_inset Newline newline
\end_inset

clusters
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "/home/cb/Uni/Literatur/Literatur"
options "unsrtnat"

\end_inset


\end_layout

\end_body
\end_document
