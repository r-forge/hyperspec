\documentclass[english, a4paper, 10pt, headings=small, DIV11]{scrartcl}
\SweaveInput{vignettes.defs}
\hypersetup{pdftitle={FileIO},
 pdfauthor={C. Beleites},
 pdfsubject={Vignette File Import and Export for R package hyperSpec},
 pdfkeywords={hyperSpec, data format, file, import, export}}

% \VignetteIndexEntry{FileIO: Import and Export of Spectra into R/hyperSpec}
% \VignetteKeywords{hyperSpec, import, export, .spc, ENVI, ASCII}
% \VignettePackage{hyperSpec}

\begin{document}
\title{Import and Export of Spectra Files\\
Vignette for the R package \Rpackage{hyperSpec} }
\maketitle

\warnbox{Reproducing the Examples in this Vignette}{
The source code of this vignette including the spectra files are available as .zip file at \phy's home page:
 \url{http://r-forge.r-project.org/projects/hyperspec/FileIO.zip}
}
\tableofcontents

\section{Introduction}
This document describes how spectra can be imported into \chy objects. Some possibilities to export \chy objects as files are mentioned, too.

The most basic funtion to create \chy objects is \Rfunction{new ("hyperSpec")} (section~\ref{sec:new}). It makes a \chy object from data already in R's workspace. Thus, once the spectra are imported into R, conversion to \chy objects is straightforward.

However, \phy comes with predifined import functions for different data formats.
This document divides the discussion into dealing with ASCII files (section) and binary file formats.
If data export for the respective format is possible, it is discussed in the same sections.
As sometimes the actual data written by the spectrometer software exhibits peculiarities, \phy offers specialized import functions. These are in general named after the data format followed by the manufacturer (\eg read.ENVI.Nicolet).

Finally, we give overview lists of the directly supported file formats: sorted by manufacturer (appendix~\ref{sec:manufacturer}) and by file format (appendix~\ref{sec:fileformats})


\section{Creating a \chy object with \Rfunction{new}}
\label{sec:new}
If the data is in R's workspace, a \Rclass{hyperSpec} object is created by:
\begin{Schunk}
  \begin{Sinput}
spc <- new ("hyperSpec", spc, wavelength, data, label)}
\end{Sinput}
\end{Schunk}
With the arguments:
\begin{labeling}{\Rcode{wavelength}}
\item [\Rcode{spc}] the spectra matrix
\item [\Rcode{wavelength}] the wavelength axis vector
\item [\Rcode{data}] the extra data (possibly already including the spectra matrix in column   \texttt{spc})
\item [\Rcode{label}] a list with the proper labels. Do not forget the
wavelength axis label in \Rcode{\$.wavelength} and the spectral intensity
axis label in \Rcode{\$spc}.
\end{labeling}

Thus, once your data is in R's workspace, creating a \chy object is easy. I suggest wrapping the code to import your data and the line joining it into a \chy object by your own import function. You are more than welcome to contribute such import code to \phy. Secion~\ref{sec:writing-Import} gives an example of how to wrap up the code.

\section{ASCII files}
\label{sec:ascii-files}

Currently, \Rclass{hyperSpec} provides two functions for general ASCII data import:
\begin{labeling}{\Rfunction{write.txt.wide}}
\item [\Rfunction{read.txt.long}] imports long format ASCII files, \ie one intensity value per row
\item [\Rfunction{read.txt.wide}] imports wide format ASCII files, \ie one spectrum per row
\end{labeling}

The import functions immediately return a \Rclass{hyperSpec} object.

Internally, they use \Rfunction{read.table}, a very powerful ASCII import function.
R supplies another ASCII import function, \Rfunction{scan}.  \Rfunction{scan} imports numeric data matrices and is faster than \Rfunction{read.table}, but cannot import column names. 
If your data does not contain a header or it is not important and can safely be skipped, you may want to import your data using \Rfunction{scan}.

\subsection{ASCII files with samples in columns}
\label{sec:ascii-files-cols}

Richard Pena from Pierre Fabre asked about importing another ASCII file type:
\begin{quote}
\emph{\noindent Triazine5\_31.txt file corresponds to X ray powder diffraction data (Bruker AXS). The native files data ``.raw'' are read with EVA software then they are converted into .uxd file with the File Exchange software (Bruker AXS). The  .uxd file are opened with Excel software and saved as .txt file, csv file (ChemoSpec) or xls.\\
The first and following columns corresponds to the angle diffraction and the intensity values of samples respectively.}
\end{quote}

This file thus differs from the ASCII formats discussed above in that the samples are actually in columns whereas \chy expects them to be in rows. The header line gives the name of the sample.
Import is straightforward, just the spectra matrix needs to be transposed to make a \chy object:
<<read.txt.t>>=
file <- read.table ("txt.t/Triazine 5_31.txt", header = TRUE, dec = ",", sep = "\t")

triazine <- new ("hyperSpec", wavelength = file [,1], spc = t (file [, -1]),
                 data = data.frame (sample = colnames (file [, -1])),
                 label = list (.wavelength = expression (2 * theta / degree), 
                               spc = "I / a.u."))
triazine
@
<<plot-triazine, fig = TRUE>>=
plot (triazine)
@

\subsection{ASCII Export} 
ASCII export can be done in wide and long format using \Rfunction{write.txt.long} and \Rfunction{write.txt.wide}. If you need a specific header or footer, use R's functions for writing files: \Rfunction{write.table}, \Rfunction{write}, \Rfunction{cat} and so on offer fine-grained control of writing ASCII files.

\subsection{Writing your own Import Function}
\label{sec:writing-Import}
This section gives examples of how to write import functions.

\subsubsection{Example 1: read.txt.PerkinElmer}
\label{sec:example-1:-read.txt.PE}

The raw spectra of the \Robject{flu} data set (see also the respective vignette) are in Perkin Elmer's ASCII file format, one spectrum per file. The files are completely ASCII text, with the actual spectra starting at line 55.

We need a function that automatically reads all files specified by a pattern, such as \texttt{*.txt}. In order to gain some speed, the spectra matrix should be preallocated after the first file is read. 

A short examination of the files (\texttt{flu*.txt} in directory \texttt{txt.PerkinElmer}) reveals that the actual spectrum starts at line 55, after a line containing \texttt{\#DATA}.
As no other information of the files is to be extracted, it is easier to skip the first 54 lines instead of searching for the line after \texttt{\#DATA}. 

The resulting import function is saved as an .R file, that can be easily  \Rfunction{source}d into an R session:
\VerbatimInput[frame=single, label={scan.txt.PerkinElmer.R}, formatcom=\footnotesize]{scan.txt.PerkinElmer.R}

Note how labels giving the correct units (\eg for axis labels) are set. The label with the special name \Rcode{.wavelength} corresponds to the wavelength axis, all data columns should have a label with the same name. The spectra are always in a data column called \Rcode{spc}.

Thus,
<<scan.txt.PerkinElmer>>=
source ("scan.txt.PerkinElmer.R")
scan.txt.PerkinElmer ("txt.PerkinElmer/*.txt")
@
imports the spectra.

\subsubsection{Example 2: read.uxd.Bruker}
\label{sec:read.uxd.Bruker}

Bruker X-ray diffraction data may be converted to .uxd files, a long ASCII format. Again, multiple files need to be imported into one \chy object.


\section{Binary file formats}
\label{sec:binary-file-formats}

\subsection{Matlab Files}
\label{sec:readMat}
Matlab files can be read and written using the package \Rpackage{R.matlab}\citep{R.matlab},
which is available at CRAN and can be installed by \Rcode{install.packages (\textquotedbl R.matlab\textquotedbl)}.
\begin{Schunk}
  \begin{Sinput}
spc.mat <- readMat ("spectra.mat")
\end{Sinput}
\end{Schunk}
will import 

If the .mat file was saved with compression, the additional package \Rpackage{Rcompression} is needed. It can be installed from omegahat: 
\begin{Schunk}
  \begin{Sinput}
install.packages("Rcompression", repos = "http://www.omegahat.org/R")
\end{Sinput}
\end{Schunk}
See the documentation of \Rpackage{R.matlab} for more details and possibly needed further packages.

\Rfunction{readMat} imports the .mat file's contents as a list. The variables in the .mat file are properly named elements of the list. The \chy object can be created using \Rfunction{new}, see~\ref{sec:new}~(p.~\pageref{sec:new}).

Again, you probably want to wrap the import of your matlab files into a function.

\subsubsection{Writing Matlab Files}
\label{sec:writing-matlab-files}
\Rpackage{R.matlab}'s function \Rfunction{writeMat} can be used to write R objects into .mat files.
To save an \chy object \Robject{x} for use in Matlab, you most likely want to save:
\begin{itemize}
\item the wavelength axis as obtained by \Rcode{wl (x)},
\item the spectra matrix as obtained by \Rcode{x [[]]}, and
\item possibly also the extra data as obtained by \Rcode{x\$..}
\item as well as the axis labels \Rcode{labels (x)}.
\item Alternatively, \Rcode{x\$.} yields the extra data together with the spectra matrix.
\end{itemize}
However, it may be convenient to transform the saved data according to how it is needed in Matlab. The functions \Rfunction{as.long.df} and \Rfunction{as.wide.df} may prove useful for reshaping the data.

\subsection{ENVI Files}
\label{sec:envi-files}
 ENVI files are binary data accompanied by an ASCII header file. \phy's function \Rfunction{read.ENVI} can be used to import them.

As we experienced missing header files (Bruker's Opus software frequently produces header files without any content), the data that would usually be read from the header file can also be handed to \Rfunction{read.ENVI} as a list. The help page gives details on what elements the list should contain.

\subsubsection{ENVI Export}
\label{sec:envi-export}
Use package \Rpackage{caTools} or \Rpackage{rgdal} with GDAL for writing ENVI files.

\subsection{spc Files}
\label{sec:spc-files}
Thermo Galactic's .spc file format can be read by \Rfunction{read.spc}. 

A vast variety of sub-formats is available. \phy's import function does not support the \emph{old file format} that was used before 1996. In addition, no test data with \emph{w planes} was available -- thus the import of such files could not be tested. If you come across such files, please contact the package maintainer.

These functionality is tested using Thermo Galactic's example files:
<<read.spc>>=
## old format files stop with an error:
old <- paste ("spc", c ('CONTOUR.SPC', 'DEMO 3D.SPC', 'LC DIODE ARRAY.SPC'), sep = "/")
for (f in old)
  try (read.spc (f))

## all other files should be good for import
other <- setdiff (Sys.glob ("spc/*.[sS][pP][cC]"), old)
for (f in other){
  spc <- read.spc (f)

  if (is (spc, "hyperSpec"))
    cat (f, ": ", nrow (spc), " spectrum(a), ", nwl (spc), " data pts / spc.\n", sep = "")
  else
    cat (f, ": list of ", length (spc), " spectra, ", 
         paste (range (sapply (spc, nwl)), collapse = " - "), 
         " data pts / spc\n", sep = "")
}
@


Like \Rfunction{read.ENVI}, \Rfunction{read.spc} allows to use pre-defined header values. See the help for 


\section{Manufacturer-Specific Discussion of File Import}

\subsection{Renishaw Raman Spectrometers}
\label{sec:scan.txt.renishaw}

Renishaw's Wire software comes with an file format converter. This program can produce a long ASCII format, .spc or .jdx files.

An optimized import function for the ASCII files is available: \Rfunction{scan.txt.Renishaw}.

<<scan.txt.Renishaw>>=
paracetamol <- scan.txt.Renishaw ("txt.Renishaw/paracetamol.txt", "spc")
paracetamol
@

The converter also offers to write .spc files. We experienced that this conversion is not fully reliable: maps were saved as depth profile, loosing all spatial information. Also, an evenly spaced wavelength axis was produced, although this was de-selected in the converter. We therefore recommend using the ASCII format.



\appendix

\section{I/O Functions by Manufacturer}
\label{sec:manufacturer}

\section{I/O Functions by File Format}
\label{sec:fileformats}





\subsection{Manufacturer Specific Import Functions}

Many spectrometer manufacturers provide a function to export their
spectra into ASCII files. The functions discussed above are written in a very general way, and are highly customizable.
I recommend wrapping these calls with the appropriate settings for
your spectra format in an import function. You may also consider contributing
such import filters to \Rpackage{hyperSpec}: send me (\href{mailto:cbeleites@units.it}{cbeleites@units.it})
the documented code (either .R + .Rd file or Roxygen commented .R).

\subsubsection{Renishaw}
\label{sec:scan.txt.Renishaw}


\subsubsection{Bruker FTIR Imaging}
\label{sec:read.ENVI.Bruker}
We use \Rfunction{read.ENVI} to import IR-Images collected with a Bruker Hyperion spectrometer with OPUS software. As mentioned above, the header files are frequently missing. We found the necessary information to be:
<<eval=FALSE>>=
header <- list (samples = 64 * no.images.in.row,
                lines = 64 * no.images.in.column,
                bands = no.data.points.per.spectrum,
                `data type` = 4,
                interleave = "bip")
@

No spatial information is given in the ENVI header (if correctly written). The lateral coordinates can be setup by specifying origin and pixel size for $x$ and $y$ directions. For details please see the help page.

\subsubsection{Nicolet FTIR Imaging}
\label{sec:read.ENVI.Nicolet}
Also Nicolet saves imaging data in ENVI files. These files use some non-standard keywords in the header file that should allow to reconstruct the lateral coordinates as well as the spectral axes' units. 

There is indication that the position of the first spectrum is recorded in \mum{}, while the pixel size is in mm. Thus a flag \Rfunarg{nicolet.correction} is provided that divides the pixel size by 1000. 
Also here, giving the correct offset and pixel size values as function arguments is possible.



\subsubsection{Kaiser Raman Maps}
\label{sec:read.spc.KaiserMap}
Spectra obtained using Kaiser's Hologram software can be saved either in their own .hol format and imported into Matlab (from where the data may be written to a .mat file readable by \Rpackage{R.matlab}'s \Rfunction{readMat}. Alternatively, Hologram can write ASCII files and .spc files. We found working with .spc files the best option. 

\phy provides the function \Rfunction{read.spc.KaiserMap} to easily import spatial collections of .spc files written by Kaiser's Hologram software. The filenames of all .spc files to be read into one \chy object can be provided either in a character vector or as a wildcard expression (\eg \textquotedbl path/to/files/*.spc\textquotedbl ).




\subsection{Creating a \Rclass{hyperSpec} Object from Spectra Matrix
and Wavelength Vector}

Once the data is in R's workspace, a \Rclass{hyperSpec} object is
created by:\\
\Rcode{spc <- new (\textquotedbl{}hyperSpec\textquotedbl{}, spc =
  spectra.matrix, wavelength = wavelength.vector)}\\
You will usually give the following arguments:
\begin{description}
\setlength{\labelwidth}{2.5cm}
\setlength{\itemindent}{1.7cm}
\item [{\Rcode{spc}}] the spectra matrix
\item [{\Rcode{wavelength}}] the wavelength axis vector
\item [{\Rcode{data}}] the extra data
\item [{\Rcode{label}}] a list with the proper labels. Do not forget the
wavelength axis label in \Rcode{\$.wavelength} and the spectral intensity
axis label in \Rcode{\$spc}.
\end{description}

\section{File Import by Format}

\noindent
\begin{footnotesize}
\begin{tabular}{llllp{3.4cm}}
  \textbf{Format} & \textbf{Manufacturer} & \textbf{Function} & \textbf{see}  & \textbf{Notes}\\[1em]
\multicolumn{4}{l}{\emph{ASCII file formats}}\\[1ex]
<<results=tex, echo = FALSE>>=
fileformats <- read.table ("fileformats.txt", header = TRUE, sep = "\t")
i <- order (fileformats$Name)
res <- apply (fileformats [i,][fileformats$X.Type [i] == "ASCII",], 1, 
       function (x) {
         cat (x [2], "&", x [3])
         if (nchar (x [4]) > 0)
           cat (" (", x[4],  ")", sep = "")
         cat (" & \\Rfunction{", x[5], "} & \\ref{sec:", x[6], "}, p. \\pageref{", 
              x[6],"} & ", x [7], "\\\\\n",
              sep = "")
       })
@
\multicolumn{4}{l}{\emph{binary file formats}}\\[1ex]
<<results=tex, echo = FALSE>>=
res <- apply (fileformats [i,][fileformats$X.Type [i] == "binary",], 1, 
       function (x) {
         cat (x [2], "&", x [3])
         if (nchar (x [4]) > 0)
           cat (" (", x[4],  ")", sep = "")
         cat (" & \\Rfunction{", x[5], "} & \\ref{sec:", x[6], "}, p. \\pageref{sec:", 
              x[6],"} & ", x [7], "\\\\\n",
              sep = "")
       })
@
\end{tabular}
\end{footnotesize}

\section{File Import by Manufacturer}
\noindent
\begin{footnotesize}
\begin{tabular}{llllp{3.4cm}}
  \textbf{Manufacturer} & \textbf{Format} & \textbf{Function} & \textbf{see}  & \textbf{Notes}\\[1em]
\multicolumn{4}{l}{\emph{Manufacturers}}\\[1ex]
<<results=tex, echo = FALSE>>=
res <- apply (fileformats [i,][fileformats$Manufacturer [i] != "",], 1, 
       function (x) {
         cat (x [3])
         if (nchar (x [4]) > 0)
           cat (" (", x[4],  ")", sep = "")
         cat ("&", x [2], " & \\Rfunction{", x[5], "} & \\ref{sec:", x[6], 
              "}, p. \\pageref{sec:", x[6],"} & ", x [7], "\\\\\n",
              sep = "")
       })
@
%\hspace{1ex}
\multicolumn{4}{l}{\emph{General import functions}}\\[1ex]
<<results=tex, echo = FALSE>>=
fileformats <- read.table ("fileformats.txt", header = TRUE, sep = "\t")
i <- order (fileformats$Manufacturer)
res <- apply (fileformats [i,][fileformats$Manufacturer [i] == "",], 1, 
       function (x) {
         cat (x [3], "&", x [2], " & \\Rfunction{", x[5], "} & \\ref{sec:", x[6], 
              "}, p. \\pageref{sec:", x[6],"} & ", x [7], "\\\\\n",
              sep = "")
       })
@
\end{tabular}
\end{footnotesize}

<<cleanup, echo = FALSE, results = hide>>=
rm (list = ls () ) 
@ 
\end{document}


