\documentclass[english, a4paper, 10pt, headings=small, DIV11]{scrartcl}
\SweaveInput{vignettes.defs}
\hypersetup{pdftitle={Chondro},
 pdfauthor={C. Beleites},
 pdfsubject={Vignette on hyperSpec's chondro data set},
 pdfkeywords={chondro, hyperSpec, cluster analysis, preprocessing, Raman, principal component analysis, PCA}}

\begin{document}
\title{Raman Spectra of Chondrocytes in Cartilage:\\
\Rpackage{hyperSpec}'s \Robject{chondro} data set }
\maketitle

\warnbox{Reproducing this vignette}{
The data set needed to reproduce the first steps of this Vignette is available as a zipped archive at \Rpackage{hyperSpec}'s
homepage, \url{http://r-forge.r-project.org/projects/hyperspec/} (ca. 8.5 MB).
The original file (ca. 31 MB) is far too large to be included in the package.
}

<<startup, echo = FALSE, results = hide>>=
options(SweaveHooks=list(fig=function() par(mar = c (4.1, 4.1, .6, .6))))
options ("width" = 100)
@ 

\section{Introduction}

This vignette describes the \Robject{chondro} data set. It shows
a complete data analysis work flow on a Raman map demonstrating frequently
needed preprocessing methods
\begin{itemize}
\item baseline correction
\item normalization
\item smoothing / interpolating spectra
\item plotting spectra
\item plotting false color maps
\end{itemize}
and other basic work techniques
\begin{itemize}
\item cutting the spectral range,
\item selecting (extracting) or deleting spectra, and
\item \emph{aggregating} spectra (e.g. calculating cluster mean spectra).
\end{itemize}
The chemometric methods used are
\begin{itemize}
\item Principal Component Analysis (PCA) and
\item hierarchical cluster analysis,
\end{itemize}
showing how to use data analysis procedures provided by R and other
packages.


\section{The Data Set}

%
\begin{figure}[tbh]
\noindent \begin{centering}
\includegraphics[width=0.5\textwidth]{080606d-flip-ausw}
\par\end{centering}
\caption{\label{fig:vis-all}Microscope view of the cartilage section. The
frame indicates the measurement area (\mum{35 \times 21}).}



\end{figure}
Raman spectra of a cartilage section were measured on each point of
a grid, resulting in a so-called \emph{Raman map}. Figure~\ref{fig:vis-all}
shows a microscope picture of the measured area and its surroundings.

The measurement parameters were:
\begin{description}
\item [Excitation wavelength:] 633 nm
\item [Exposure time:] 10 s per spectrum
\item [Objective:] 100$\times$, NA 0.85
\item [Measurement grid:] 35 $\times$21 μm, 1 μm step size
\item [Spectrometer:] Renishaw InVia
\end{description}

\section{Data Import}

Renishaw provides a converter to export their proprietary data in
a so-called long format ASCII file. Raman maps are exported having
four columns, \emph{y}, \emph{x}, \emph{raman shift}, and \emph{intensity}.
\Rpackage{hyperSpec} comes with a function to import such files,
\Rfunction{scan.txt.Renishaw}. The function assumes a map as default,
but can also handle single spectra (\Rcode{data = \textquotedbl{}spc\textquotedbl{}}),
time series (\Rcode{data = \textquotedbl{}ts\textquotedbl{}}), and
depth profiles (data = \textquotedbl{}depth\textquotedbl{}). In addition,
large files may be processed in chunks. In order to speed up the reading
\Rfunction{scan.txt.Renishaw} does not allow missing values, but
it does work with \Rcode{NA}.

<<filename>>=
library (hyperSpec)
filename <- "rawdata/chondro.txt"
@ 

<<import>>=
chondro <- scan.txt.Renishaw (filename, data = "xyspc")
chondro
@




To get an overview of the spectra, :

<<rawspc, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
plot (chondro, "spcprctl5")
@


A mean intensity map is produced by:

<<rawmap, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
plotmap (chondro, func.args = list (na.rm = TRUE), col.regions = seq.palette (20))
@
The mean being the default function to apply for squeezing the spectral intensities into a summary characteristic for the whole spectrum. \Rfunarg{func.args} is a list of further arguments that should be handed to this function. As the raw data contains \Rcode{NA}s due to deleting cosmic ray spikes, this argument is needed here.

The color coding should be 

Figure~\ref{fig:raw} shows the results.

%
\begin{figure}[tbh]
\subfloat[The raw spectra: median, 16\textsuperscript{th} and 84\textsuperscript{th},
and 5\textsuperscript{th} and 95\textsuperscript{th} percentile
spectra.]
{\includegraphics[width=0.5\textwidth]{fig/fig-rawspc}}
\subfloat[The sum intensity of the raw spectra.]
{\includegraphics[width=0.5\textwidth]{fig/fig-rawmap}}
\caption{\label{fig:raw} The raw data.}
\end{figure}



\section{Preprocessing}

As usual in Raman spectroscopy of biological tissues, the spectra
need some preprocessing.


\subsection{Spectral Smoothing}

As the overview print shows that the spectra contain \Rcode{NA}s
(from cosmic spike removal that was done previously), the first step
is to remove these. Another issue that can be solved at the same time
is that the wavelength axis is not evenly spaced (the data points
are between \Sexpr{signif (min (diff (wl (chondro))), 2)} and  
\Sexpr{signif (max (diff (wl (chondro))), 2)}
cm\textsuperscript{-1} apart from each other). Furthermore, it would
be good to trade some spectral resolution for higher signal to noise
ratio. All three of these issues are tackled by interpolating and
smoothing of the wavelength axis by \Rfunction{spc.loess}. The resolution
is to be reduced to 8 cm\textsuperscript{-1}, or 4 cm\textsuperscript{-1}
data point spacing.

<<interp>>= 
chondro <- spc.loess (chondro, seq (602, 1800, 4))
chondro
@    

The spectra are now the same as in the data set \Robject{chondro}. The data set also contains the clustering results, see below.
<<save_chondro>>=
spectra.to.save <- chondro
@

\subsection{Baseline Correction}

Next, we do a linear baseline correction. \Rfunction{spc.fit.poly.below}
tries to automatically find appropriate support points for polynomial
baselines. The default is a linear baseline, which is appropriate
in our case:

<<bl>>=
baselines <- spc.fit.poly.below (chondro)
chondro <- chondro - baselines
@


\begin{figure}[tbh]
\subfloat[\label{fig:bl-bl} The spectra after smoothing, baseline correction, and normalization.]{\includegraphics[width=0.4\textwidth]{fig/fig-norm}}\quad
\subfloat[\label{fig:bl:perc} The spectra after subtracting the 5\textsuperscript{th} percentile spectrum.]{\includegraphics[width=0.4\textwidth]{fig/fig-perc}}
\caption{\label{fig:bl}The preprocessed spectra.}
\end{figure}



\subsection{Normalization}

As the spectra are quite similar, area normalization should work well:.

<<norm, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
chondro <- sweep (chondro, 1, apply (chondro, 1, mean), "/")
plot (chondro, "spcprctl5")
@

For the results of these preprocessing steps, see figure~\ref{fig:bl-bl}.


\subsection{Subtracting the Overall Composition}

The spectra are very homogeneous, but I'm interested in the differences
between the different regions of the sample. Subtracting the minimum
spectrum cancels out the matrix composition that is common to all spectra.
But the minimum spectrum also picks up a lot of noise. So instead,
the 5\textsuperscript{th} percentile spectrum is subtracted:

<<perc, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
chondro <- sweep (chondro, 2, apply (chondro, 2, quantile, 0.05), "-")
plot (chondro, "spcprctl5")
@

The resulting data set is shown in figure~\ref{fig:bl:perc}. Some
interesting differences start to show up: there are distinct lipid
bands in some but not all of the spectra.


\subsection{Outlier Removal by Principal Component Analysis (PCA)}

PCA is a technique that decomposes the data into scores and loadings
(virtual spectra). It is known to be quite sensitive to outliers. Thus,
I use it for outlier detection. The resulting scores and loadings
are put again into \Rclass{hyperSpec} objects by \Rfunction{decomposition}:

<<pca>>=
pca <- prcomp (~ spc, data = chondro$., center = TRUE)
scores <- decomposition (chondro, pca$x, label.wavelength = "PC", label.spc = "score / a.u.")
loadings <- decomposition (chondro, t(pca$rotation), scores = FALSE, label.spc = "loading I / a.u.")
@

Plotting the scores of each PC against all other gives a good idea
where to look for outliers.

<<pca-pairs, eval = FALSE>>=
pairs (scores [[,,1:20]], pch = 19, cex = 0.5)
@

Now the spectra can be found either by plotting two scores against
each other (by \Rfunction{plot}) and identifying with \Rfunction{identify},
or they can be identified in the score map by \Rfunction{map.identify}.
There is also a function to identify spectra in a spectra plot, \Rfunction{spc.identify},
but this is not helpful here.

<<pca-identify, eval = FALSE>>=
out <- map.identify (scores [,,5])
out <- c (out, map.identify (scores [,,6]))
out <- c (out, map.identify (scores [,,7]))
@

<<pca-out, echo = FALSE, results = hide>>=
out <- c(105, 140, 216, 289, 75, 69)
@

<<pca-cols>>=
out
outcols <- c ("red", "blue", "#800080", "orange", "magenta", "brown")

cols <- rep ("black", nrow(chondro))
cols [out] <- outcols
@

We can check our findings by comparing the spectra to the bulk of
spectra (figure~):

<<pca-outspc, fig = TRUE, width = 7.5, height = 7.5, include = FALSE>>=
plot(chondro[1], plot.args = list (ylim = c (1, length (out) + .7)), lines.args = list(  type = "n"))
for (i in seq (along = out)){
   plot(chondro, "spcprctl5", yoffset = i, add = TRUE, col = "gray")
   plot (chondro [out[i]], yoffset = i, col = outcols[i] , add = TRUE, lines.args = list (lwd = 2))
   text (600, i + .33, out [i])  }
@

and also by looking where these spectra appear in the scores \Rfunction{pairs}
plot (figure~):

<<pca-pairs2, include = FALSE, results = hide>>=
png ("fig/fig-pca-pairs2.png", width = 1000, height = 1000)
pairs (scores [[,,1:7]], pch = 19, cex = 1, col = cols)
dev.off ()
@

Finally, the outliers are removed:

<<outdel>>=
chondro <- chondro [- out]
@

%
\begin{figure}[tbh]
\subfloat[\Rfunction{pairs} plot of the first 7 scores.]{\includegraphics[width=0.495\textwidth]{fig/fig-pca-pairs2}

}\subfloat[The suspected outlier spectra.]{\includegraphics[width=0.495\textwidth]{fig/fig-pca-outspc}}\caption{Outlier removal by PCA}

\end{figure}



\section{Hierarchical Cluster Analysis (HCA)}

HCA fuses objects according to their (dis)similarity. The result is
a dendrogram, a graph stating at which level two objects are similar
and thus grouped together.

The first step in HCA is the choice of the distance. The R function
\Rfunction{dist} offers a variety of distance measures to be computed.
The so-called \textsc{Pearson} distance \global\long\def\COR{COR}
$D^2_{Pearson}=\frac{1-\COR\left(X\right)}{2}$
is popular in data analysis of vibrational spectra and is provided
by \Rpackage{hyperSpec}.

Also for computing the dendrogram, a number of choices are available.
I choose \textsc{Ward}'s method, and, as it uses \textsc{Euclid}ean
distance for calculating the dendrogram, \textsc{Euclid}ean distance
also for the distance matrix :

<<hca>>=
dist <- dist (chondro [[]])
dendrogram <- hclust (dist, method = "ward")
@

<<denddummy, eval = FALSE>>=
plot (dendrogram)
@

In order to get clusters, the dendrogram is cut at a level specified
either by height or by the number of clusters. 
<<dendcut>>=
chondro$clusters <- as.factor (cutree (dendrogram, k = 3))
cols <- c ("dark blue", "orange", "#C02020")
@
The result for $k$= 3 clusters is plotted as a map (figure~\ref{fig:clustmap}). If the color-coded variate (left hand side of the formula) is a factor, the legend bar does not show intermediate colors, and \chy's \Rfunction{levelplot} method uses the levels of the factor for the legend.

Thus  meaningful names are assigned
<<clustname>>=
levels (chondro$clusters) <- c ("matrix", "lacuna", "cell")
@
and the cluster membership map is plotted:
<<clustmap, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
print (plotmap (chondro, clusters ~ x * y, col.regions = cols))
@

The cluster membership can also be marked in the dendrogram:

<<dend, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
plot (dendrogram, labels = FALSE, hang = 0) 
points (seq_along (dendrogram$order), rep (-3, length (dendrogram$order)),
        col = cols [chondro$clusters [dendrogram$order]], pch = "|")
@     
   
Figure~\ref{fig:dend} shows the dendrogram and \ref{fig:clustmap}
the resulting cluster map. The three clusters correspond to the cartilage
matrix, the lacuna and the cells. The left cell is destroyed and its
contents are leaking into the matrix, while the right cells looks
intact.

We can calculate the cluster mean spectra using \Rfunction{aggregate}.
However, we can do even better and plot the cluster mean spectra $\pm$
1 standard deviation (see figure~\ref{fig:clustmeans}): 

<<clustmeans, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
cluster.means <- aggregate (chondro, chondro$clusters, mean_pm_sd)
plot(cluster.means, stacked = ".aggregate", fill = ".aggregate", col = cols)
@

%
\begin{figure}[tbh]
\subfloat[\label{fig:dend} The dendrogram.]{\includegraphics[width=0.495\textwidth]{fig/fig-dend}}\subfloat[\label{fig:clustmap} The cluster map for $k=3$ clusters.]{\includegraphics[width=0.495\textwidth]{fig/fig-clustmap}}\caption{Hierarchical cluster analysis.}
\end{figure}
\begin{figure}[tbh]
\subfloat[\label{fig:clustmeans} The cluster mean $\pm$ 1 standard deviation
spectra. The blue cluster shows distinct lipid bands, the green cluster
collagen, and the red cluster proteins and nucleic acids.]
{\includegraphics[width=0.495\textwidth]{fig/fig-clustmeans}}
\subfloat[\label{fig:DNA} False colour map of the DNA band intensities.]
{\includegraphics[width=0.495\textwidth]{fig/fig-DNA}}
\caption{}
\end{figure}

\section{Plotting a False-Colour Map of Certain Spectral Regions}

\Rclass{hyperSpec} comes with a sophisticated interface for specifying
spectral ranges. Expressing things like 1000~cm\textsuperscript{-1}
$\pm$~1 data points are easily possible. Thus, we can have a fast
look at the nucleic acid distribution, using the DNA bands at 728,
782, 1098, 1240, 1482, and 1577~cm\textsuperscript{-1}: 

<<DNA, fig = TRUE, width = 7.5, height = 5, include = FALSE>>=
plotmap (chondro[, , c( 728, 782, 1098, 1240, 1482, 1577)],
       col.regions = colorRampPalette (c("white", "gold", "dark green"), space = "Lab") (20))
@


The result is shown in figure~\ref{fig:DNA}. While the nucleus of
the right cell shows up nicely, nothing is detected in the remainders
of the left cell.

Finally, the example data set is put together and saved:
<<save>>=
spectra.to.save <- spectra.to.save [-out]
spectra.to.save$clusters <- chondro$clusters
chondro <- spectra.to.save
save (chondro, file = "chondro.rda")
@


<<cleanup, echo = FALSE, results=hide>>=
rm (list = ls () ) 
@ 
\end{document}
